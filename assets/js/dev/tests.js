// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Really fast unit testing.
*/

var exec, fs, getAllFiles, getDeps, getDirectoryFiles, getNamespacesToTest, getTestFiles, resolveDeps;

fs = require('fs');

exec = require('child_process').exec;

/**
  @return {Object.<string, Object>} Key is namespace, value is src, dependencies
*/


getDeps = function() {
  var deps, depsFile, goog;
  deps = {};
  goog = {
    addDependency: function(src, namespaces, dependencies) {
      var namespace, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = namespaces.length; _i < _len; _i++) {
        namespace = namespaces[_i];
        _results.push(deps[namespace] = {
          src: src.replace('../../../', 'assets/js/'),
          dependencies: dependencies
        });
      }
      return _results;
    }
  };
  depsFile = fs.readFileSync('./assets/js/deps.js', 'utf8');
  eval(depsFile);
  return deps;
};

/**
  @return {Object.<string, string>} Key is filePath, value is textFilePath
*/


getTestFiles = function() {
  var files;
  files = {};
  getDirectoryFiles('assets/js', function(testFilePath) {
    var filePath;
    if (testFilePath.indexOf('google-closure') > -1) {
      return;
    }
    if (testFilePath.slice(-8) !== '_test.js') {
      return;
    }
    filePath = testFilePath.slice(0, -8) + '.js';
    return files[filePath] = testFilePath;
  });
  return files;
};

/**
  @param {string} directory
  @param {Function} callback
*/


getDirectoryFiles = function(directory, callback) {
  var file, filePath, files, stats, _i, _len;
  files = fs.readdirSync(directory);
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    filePath = directory + '/' + file;
    stats = fs.statSync(filePath);
    if (stats.isFile()) {
      callback(filePath);
    }
    if (stats.isDirectory()) {
      getDirectoryFiles(filePath, callback);
    }
  }
};

/**
  @param {Object} files
  @param {Object} deps
  @return {Array.<string>}
*/


getNamespacesToTest = function(files, deps) {
  var file, key, namespaces, testFile, value;
  namespaces = ['goog.testing.events'];
  for (file in files) {
    testFile = files[file];
    for (key in deps) {
      value = deps[key];
      if (value.src === file) {
        namespaces.push(key);
      }
    }
  }
  return namespaces;
};

/**
  @param {Array.<string>} namespaces
  @param {Object} deps
  @return {Array.<string>}
*/


resolveDeps = function(namespaces, deps) {
  var files, resolve;
  files = [];
  resolve = function(namespaces) {
    var namespace, src, _i, _len;
    for (_i = 0, _len = namespaces.length; _i < _len; _i++) {
      namespace = namespaces[_i];
      if (!deps[namespace]) {
        continue;
      }
      src = deps[namespace].src;
      if (files.indexOf(src) > -1) {
        continue;
      }
      resolve(deps[namespace].dependencies);
      files.push(src);
    }
  };
  resolve(namespaces);
  return files;
};

/**
  @param {Array.<string>} depsFiles
  @param {Object.<string>} testFiles
  @return {Array.<string>}
*/


getAllFiles = function(depsFiles, testFiles) {
  var file, files, testFile;
  files = ['assets/js/dev/nodebase.js', 'assets/js/dev/mocks.js'];
  files.push.apply(files, depsFiles);
  for (file in testFiles) {
    testFile = testFiles[file];
    files.push(testFile);
  }
  return files;
};

exports.run = function(callback) {
  var command, deps, depsFiles, files, namespaces, testFiles;
  deps = getDeps();
  testFiles = getTestFiles();
  namespaces = getNamespacesToTest(testFiles, deps);
  depsFiles = resolveDeps(namespaces, deps);
  files = getAllFiles(depsFiles, testFiles);
  command = "node assets/js/dev/node_modules/mocha/bin/mocha    --colors    --timeout 50    --ui tdd    --reporter min " + (files.join(' '));
  return exec(command, callback);
};

exports.getDeps = getDeps;
