// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Base class for various sync/async storages. It defines common
  api for models/collections persitence.
*/

goog.provide('este.storage.Base');

goog.require('goog.result');


  /**
    @param {string} namespace
    @constructor
  */

  este.storage.Base = function(namespace) {
    this.namespace = namespace;
  }

  /**
    @type {string}
  */


  este.storage.Base.prototype.namespace = '';

  /**
    @param {este.Model} model
    @param {string} id
    @return {!goog.result.Result}
  */


  este.storage.Base.prototype.load = goog.abstractMethod;

  /**
    @param {este.Model} model
    @return {!goog.result.Result}
  */


  este.storage.Base.prototype.save = goog.abstractMethod;

  /**
    @param {este.Model} model
    @return {!goog.result.Result}
  */


  este.storage.Base.prototype["delete"] = goog.abstractMethod;

  /**
    @param {este.Collection} collection
    @param {Object=} params
    @return {!goog.result.Result}
  */


  este.storage.Base.prototype.query = goog.abstractMethod;

  /**
    This method maps event type to its method.
    todo: add tests once api will be stabilized
    @param {este.Model.Event} e
    at return {!goog.result.Result}
  */


  este.storage.Base.prototype.saveChanges = function(e) {
    var added, removed, results;
    switch (e.type) {
      case 'add':
        results = (function() {
          var _i, _len, _ref, _results;
          _ref = e.added;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            added = _ref[_i];
            _results.push(this.save(added));
          }
          return _results;
        }).call(this);
        break;
      case 'remove':
        results = (function() {
          var _i, _len, _ref, _results;
          _ref = e.removed;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            removed = _ref[_i];
            _results.push(this["delete"](removed));
          }
          return _results;
        }).call(this);
        break;
      case 'change':
        results = [this.save(e.model)];
        break;
      case 'update':
        return this.saveChanges(e.origin);
      default:
        goog.asserts.fail("Only add, remove, change, and update events are supported, not: " + e.type + ".");
    }
    return goog.result.combineOnSuccess.apply(null, results);
  };

  /**
    @param {este.Model} model
    @return {string} model id
    @protected
  */


  este.storage.Base.prototype.checkModelId = function(model) {
    var id;
    id = model.get('id');
    goog.asserts.assertString(id, 'model id has to be string');
    return id;
  };

  /**
    @param {este.Model} model
    @protected
  */


  este.storage.Base.prototype.checkModelUrn = function(model) {
    return goog.asserts.assertString(model.urn, 'model urn has to be string');
  };

  /**
    @param {este.Collection} collection
    @return {string}
    @protected
  */


  este.storage.Base.prototype.checkCollectionUrn = function(collection) {
    var urn;
    urn = collection.getUrn();
    goog.asserts.assertString(urn, 'collection.getUrn() has to be string');
    return urn;
  };

  
