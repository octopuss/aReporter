// Generated by CoffeeScript 1.4.0

suite('este.storage.Local', function() {
  var Local, Model, collection, idFactory, local, mechanism, model, root;
  Local = este.storage.Local;
  root = null;
  mechanism = null;
  idFactory = null;
  Model = null;
  model = null;
  collection = null;
  local = null;
  setup(function() {
    root = '';
    mechanism = {
      set: function(key, value) {
        return this[key] = value;
      },
      get: function(key) {
        return this[key];
      },
      remove: function(key) {
        return delete this[key];
      }
    };
    idFactory = function() {
      return 'someUniqueId';
    };
    Model = function() {};
    Model.prototype.urn = 'model';
    Model.prototype.set = function(key, value) {
      return this[key] = value;
    };
    Model.prototype.get = function(key) {
      return this[key];
    };
    Model.prototype.toJson = function() {
      return este.json.parse(este.json.stringify(this));
    };
    Model.prototype.set = function(json) {
      var k, v;
      for (k in json) {
        v = json[k];
        this[k] = json;
      }
    };
    model = new Model;
    collection = {
      getModel: function() {
        return Model;
      },
      getUrn: function() {
        return Model.prototype.urn;
      },
      add: function() {}
    };
    return local = new Local(root, mechanism, idFactory);
  });
  suite('constructor', function() {
    return test('should work', function() {
      return assert.instanceOf(local, Local);
    });
  });
  suite('save', function() {
    test('should assign id for model without id', function(done) {
      model.set = function(json, forceIds) {
        assert.deepEqual(json, {
          id: 'someUniqueId'
        });
        assert.isTrue(forceIds);
        return done();
      };
      return local.save(model);
    });
    test('should not assign id for model with id', function() {
      var called;
      called = false;
      model.get = function(key) {
        if (key === 'id') {
          return '123';
        }
      };
      model.set = function(json, forceIds) {
        return called = true;
      };
      local.save(model);
      return assert.isFalse(called);
    });
    test('should store json to mechanism', function(done) {
      mechanism.set = function(key, value) {
        assert.equal(key, 'model');
        assert.equal(value, '{"someUniqueId":{"foo":"bla"}}');
        return done();
      };
      model.toJson = function(noMetas, noId) {
        assert.isTrue(noMetas);
        assert.isTrue(noId);
        return {
          foo: 'bla'
        };
      };
      return local.save(model);
    });
    test('should return success result with id', function(done) {
      var result;
      result = local.save(model);
      return goog.result.waitOnSuccess(result, function(value) {
        assert.equal(value, 'someUniqueId');
        return done();
      });
    });
    return test('should throw exception for model without urn', function(done) {
      model.urn = null;
      try {
        return local.save(model);
      } catch (e) {
        assert.instanceOf(e, Error);
        return done();
      }
    });
  });
  suite('load', function() {
    test('should throw exception for model without id', function(done) {
      try {
        return local.load(model);
      } catch (e) {
        assert.instanceOf(e, Error);
        return done();
      }
    });
    test('should not throw exception for model with id', function() {
      var called;
      called = false;
      model.id = '123';
      try {
        local.load(model);
      } catch (e) {
        called = true;
      }
      return assert.isFalse(called);
    });
    test('should mechanism.get model', function(done) {
      var getKey;
      getKey = null;
      mechanism.get = function(key) {
        assert.equal(key, 'model');
        return done();
      };
      model.id = '123';
      return local.load(model);
    });
    test('should load model', function(done) {
      mechanism.get = function(key) {
        assert.equal(key, 'model');
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '123';
      model.set = function(json) {
        assert.deepEqual(json, {
          foo: 'bla'
        });
        return done();
      };
      return local.load(model);
    });
    test('should return success result with id', function(done) {
      var result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '123';
      result = local.load(model);
      return goog.result.waitOnSuccess(result, function(value) {
        assert.equal(value, '123');
        return done();
      });
    });
    test('should return error result if storage does not exists', function(done) {
      var result;
      mechanism.get = function(key) {
        return '';
      };
      model.id = '123';
      result = local.load(model);
      return goog.result.waitOnError(result, function() {
        return done();
      });
    });
    test('should return error result if storage item does not exists', function(done) {
      var result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '789';
      result = local.load(model);
      return goog.result.waitOnError(result, function() {
        return done();
      });
    });
    return test('should throw exception for model without urn', function(done) {
      model.urn = null;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '123';
      try {
        return local.load(model);
      } catch (e) {
        assert.instanceOf(e, Error);
        return done();
      }
    });
  });
  suite('delete', function() {
    test('should delete model from storage', function(done) {
      var result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      mechanism.remove = function(key) {
        assert.equal(key, 'model');
        return done();
      };
      model.id = '123';
      return result = local["delete"](model);
    });
    test('should return success result with id', function(done) {
      var result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '123';
      result = local["delete"](model);
      return goog.result.waitOnSuccess(result, function(value) {
        assert.equal(value, '123');
        return done();
      });
    });
    test('should throw exception for model without id', function(done) {
      try {
        return local["delete"](model);
      } catch (e) {
        assert.instanceOf(e, Error);
        return done();
      }
    });
    test('should return error result if storage does not exists', function(done) {
      var result;
      mechanism.get = function(key) {
        return '';
      };
      model.id = '456';
      result = local["delete"](model);
      return goog.result.waitOnError(result, function() {
        return done();
      });
    });
    test('should return error result if item does not exists', function(done) {
      var result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '456';
      result = local["delete"](model);
      return goog.result.waitOnError(result, function() {
        return done();
      });
    });
    return test('should throw exception for model without urn', function(done) {
      model.urn = null;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"}}';
      };
      model.id = '123';
      try {
        return local["delete"](model);
      } catch (e) {
        assert.instanceOf(e, Error);
        return done();
      }
    });
  });
  return suite('query', function() {
    test('should throw exception for getUrn() != string', function(done) {
      collection.getUrn = function() {};
      try {
        return local.query(collection);
      } catch (e) {
        return done();
      }
    });
    test('should load collection', function(done) {
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"},"456":{"bla":"foo"}}';
      };
      collection.add = function(array) {
        assert.deepEqual(array, [
          {
            foo: 'bla',
            id: '123'
          }, {
            bla: 'foo',
            id: '456'
          }
        ]);
        return done();
      };
      return local.query(collection);
    });
    return test('should return success result with params', function(done) {
      var params, result;
      mechanism.get = function(key) {
        return '{"123":{"foo":"bla"},"456":{"bla":"foo"}}';
      };
      params = {};
      result = local.query(collection, params);
      return goog.result.waitOnSuccess(result, function(value) {
        assert.equal(value, params);
        return done();
      });
    });
  });
});
