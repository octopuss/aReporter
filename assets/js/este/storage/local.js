// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Local storage for este.Model's via HTML5 or IE user data.

  todo:
    consider Este <templates>
    check if value was stored
      fire goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED if not
    scheme
      version
      updaters
*/



goog.provide('este.storage.Local');

goog.require('este.json');

goog.require('este.result');

goog.require('este.storage.Base');

goog.require('goog.asserts');

goog.require('goog.object');

goog.require('goog.storage.mechanism.mechanismfactory');

goog.require('goog.string');



  

  /**
    @param {string} namespace
    @param {goog.storage.mechanism.Mechanism=} mechanism
    @param {function():string=} idFactory
    @constructor
    @extends {este.storage.Base}
  */


  este.storage.Local = function(namespace, mechanism, idFactory) {
    este.storage.Local.superClass_.constructor.call(this, namespace);
    this.mechanism = mechanism != null ? mechanism : goog.storage.mechanism.mechanismfactory.create(this.namespace);
    this.idFactory = idFactory != null ? idFactory : goog.string.getRandomString;
  }

  goog.inherits(este.storage.Local, este.storage.Base);

  /**
    @type {goog.storage.mechanism.Mechanism}
    @protected
  */


  este.storage.Local.prototype.mechanism = null;

  /**
    @type {function():string}
    @protected
  */


  este.storage.Local.prototype.idFactory = function() {};

  /**
    @inheritDoc
  */


  este.storage.Local.prototype.save = function(model) {
    var id, models, serializedModels;
    this.checkModelUrn(model);
    id = this.ensureModelId(model);
    serializedModels = this.mechanism.get(model.urn);
    models = serializedModels ? este.json.parse(serializedModels) : {};
    models[id] = model.toJson(true, true);
    this.saveModels(models, model.urn);
    return este.result.ok(id);
  };

  /**
    @inheritDoc
  */


  este.storage.Local.prototype.load = function(model) {
    var id, json, models;
    this.checkModelUrn(model);
    id = this.checkModelId(model);
    models = this.loadModels(model.urn);
    if (!models) {
      return este.result.fail();
    }
    json = models[id];
    if (!json) {
      return este.result.fail();
    }
    model.set(json);
    return este.result.ok(id);
  };

  /**
    @inheritDoc
  */


  este.storage.Local.prototype["delete"] = function(model) {
    var id, models;
    this.checkModelUrn(model);
    id = this.checkModelId(model);
    if (id) {
      models = this.loadModels(model.urn);
      if (models && models[id]) {
        delete models[id];
        this.saveModels(models, model.urn);
        return este.result.ok(id.toString());
      }
    }
    return este.result.fail();
  };

  /**
    @inheritDoc
  */


  este.storage.Local.prototype.query = function(collection, params) {
    var array, models, urn;
    urn = this.checkCollectionUrn(collection);
    models = this.loadModels(urn);
    array = this.modelsToArray(models);
    collection.add(array);
    return este.result.ok(params);
  };

  /**
    @param {este.Model} model
    @return {string} id
    @protected
  */


  este.storage.Local.prototype.ensureModelId = function(model) {
    var id;
    id = model.get('id');
    if (id != null) {
      return id.toString();
    }
    id = this.idFactory();
    model.set({
      'id': id
    }, true);
    return id;
  };

  /**
    @param {Object.<string, Object>} models
    @param {string} urn
    @protected
  */


  este.storage.Local.prototype.saveModels = function(models, urn) {
    var serializedJson;
    if (goog.object.isEmpty(models)) {
      return this.mechanism.remove(urn);
    } else {
      serializedJson = este.json.stringify(models);
      return this.mechanism.set(urn, serializedJson);
    }
  };

  /**
    @param {string} urn
    @return {Object.<string, Object>}
    @protected
  */


  este.storage.Local.prototype.loadModels = function(urn) {
    var serializedJson;
    serializedJson = this.mechanism.get(urn);
    if (!serializedJson) {
      return null;
    }
    return este.json.parse(serializedJson);
  };

  /**
    @param {Object.<string, Object>} models
    @return {Array.<Object>}
    @protected
  */


  este.storage.Local.prototype.modelsToArray = function(models) {
    var id, object, _results;
    _results = [];
    for (id in models) {
      object = models[id];
      object['id'] = id;
      _results.push(object);
    }
    return _results;
  };

  
