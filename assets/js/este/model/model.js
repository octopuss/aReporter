// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Model with attributes and schema.

  Features
    setters, getters, validators
    model's change event with event bubbling
    JSON serialization

  Why not plain objects?
    - http://www.devthought.com/2012/01/18/an-object-is-not-a-hash
    - strings are better for uncompiled attributes from DOM or storage etc.

  clientId
    clientId is temporary session id. It's erased when you close your browser.
    Itefn47v2hm63h1efn47v2hm63h:'.
    For local storage persistence is used este.storage.Local unique-enough ID.

  Notes
    - to modify complex attribute: joe.get(efn47v2hm63h2efn47v2hm63h).add efn47v2hm63h3efn47v2hm63h

  @see ../demos/model.html
*/



goog.provide('este.Model');

goog.provide('este.Model.EventType');

goog.provide('este.Model.Event');

goog.require('este.json');

goog.require('este.model.getters');

goog.require('este.model.setters');

goog.require('este.model.validators');

goog.require('goog.asserts');

goog.require('goog.events.Event');

goog.require('goog.events.EventTarget');

goog.require('goog.object');

goog.require('goog.ui.IdGenerator');



  

  /**
    @param {Object=} json
    @param {function(): string=} idGenerator
    @constructor
    @extends {goog.events.EventTarget}
  */


  este.Model = function(json, idGenerator) {
    var _ref;
    este.Model.superClass_.constructor.call(this);
    this.attributes = {};
    if ((_ref = this.schema) == null) {
      this.schema = {};
    }
    if (this.defaults) {
      this.set(this.defaults);
    }
    if (json) {
      this.set(json);
    }
    this.ensureClientId(idGenerator);
  }

  goog.inherits(este.Model, goog.events.EventTarget);

  /**
    @enum {string}
  */


  este.Model.EventType = {
    CHANGE: 'change',
    ADD: 'add',
    REMOVE: 'remove',
    SORT: 'sort',
    UPDATE: 'update'
  };

  /**
    http://en.wikipedia.org/wiki/Uniform_resource_name
    It's used by este.storage.Local and este.storage.Local.
    @type {string}
  */


  este.Model.prototype.urn = 'model';

  /**
    @type {Object}
    @protected
  */


  este.Model.prototype.attributes = null;

  /**
    @type {Object}
    @protected
  */


  este.Model.prototype.defaults = null;

  /**
    @type {Object}
    @protected
  */


  este.Model.prototype.schema = null;

  /**
    Set model attribute(s).
    model.set efn47v2hm63h22efn47v2hm63h, 1
    model set efn47v2hm63h23efn47v2hm63h: 1, efn47v2hm63h24efn47v2hm63h: 2
    Invalid values are ignored.
    Dispatch change event with changed property, if any.
    Returns errors.
    @param {Object|string} json Object of key value pairs or string key.
    @param {*=} value value or nothing.
    @return {Object} errors object, ex. name: required: true if error
  */


  este.Model.prototype.set = function(json, value) {
    var changes, errors, _json;
    if (!json) {
      return null;
    }
    if (typeof json === 'string') {
      _json = {};
      _json[json] = value;
      json = _json;
    }
    changes = this.getChanges(json);
    if (!changes) {
      return null;
    }
    errors = this.getErrors(changes);
    if (errors) {
      changes = goog.object.filter(changes, function(value, key) {
        return !errors[key];
      });
    }
    if (!goog.object.isEmpty(changes)) {
      this.setInternal(changes);
      this.dispatchChangeEvent(changes);
    }
    return errors;
  };

  /**
    Returns model attribute(s).
    @param {string|Array.<string>} key
    @return {*|Object.<string, *>}
  */


  este.Model.prototype.get = function(key) {
    var get, json, k, meta, value, _i, _len, _ref, _ref1;
    if (typeof key !== 'string') {
      json = {};
      for (_i = 0, _len = key.length; _i < _len; _i++) {
        k = key[_i];
        json[k] = this.get(k);
      }
      return json;
    }
    meta = (_ref = this.schema[key]) != null ? _ref['meta'] : void 0;
    if (meta) {
      return meta(this);
    }
    value = this.attributes[this.getKey(key)];
    get = (_ref1 = this.schema[key]) != null ? _ref1.get : void 0;
    if (get) {
      return get(value);
    }
    return value;
  };

  /**
    @param {string} key
    @return {boolean}
  */


  este.Model.prototype.has = function(key) {
    var _ref;
    if (this.getKey(key) in this.attributes) {
      return true;
    }
    if ((_ref = this.schema[key]) != null ? _ref['meta'] : void 0) {
      return true;
    }
    return false;
  };

  /**
    @param {string} key
    @return {boolean} true if removed
  */


  este.Model.prototype.remove = function(key) {
    var changed, value, _key;
    _key = this.getKey(key);
    if (!(_key in this.attributes)) {
      return false;
    }
    value = this.attributes[_key];
    if (value instanceof goog.events.EventTarget) {
      value.setParentEventTarget(null);
    }
    delete this.attributes[_key];
    changed = {};
    changed[key] = value;
    this.dispatchChangeEvent(changed);
    return true;
  };

  /**
    Serialize model, childs included.
    @param {boolean=} noMetas If true, metas and clientId are omitted.
    @param {boolean=} noId If true, id is ommited (used in este.storage.*).
    @return {Object}
  */


  este.Model.prototype.toJson = function(noMetas, noId) {
    var attr, json, key, meta, origKey, value, _ref, _ref1;
    json = {};
    _ref = this.attributes;
    for (key in _ref) {
      value = _ref[key];
      origKey = key.substring(1);
      if (noMetas && origKey === 'clientId') {
        continue;
      }
      if (noId && origKey === 'id') {
        continue;
      }
      attr = this.get(origKey);
      if (attr.toJson) {
        json[origKey] = attr.toJson();
      } else {
        json[origKey] = attr;
      }
    }
    if (!noMetas) {
      _ref1 = this.schema;
      for (key in _ref1) {
        value = _ref1[key];
        meta = value != null ? value['meta'] : void 0;
        if (!meta) {
          continue;
        }
        json[key] = meta(this);
      }
    }
    return json;
  };

  /**
    @return {Object} errors object, ex. name: required: true if error
  */


  este.Model.prototype.validate = function() {
    var key, keys, value, values;
    keys = (function() {
      var _ref, _results;
      _ref = this.schema;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        if (value != null ? value['validators'] : void 0) {
          _results.push(key);
        }
      }
      return _results;
    }).call(this);
    values = this.get(keys);
    values = /** @type {Object} */ (values);

    return this.getErrors(values);
  };

  /**
    Prefix because http://www.devthought.com/2012/01/18/an-object-is-not-a-hash
    @param {string} key
    @return {string}
  */


  este.Model.prototype.getKey = function(key) {
    return '$' + key;
  };

  /**
    @param {Object} json
    @protected
  */


  este.Model.prototype.setInternal = function(json) {
    var $key, currentValue, key, value;
    for (key in json) {
      value = json[key];
      $key = this.getKey(key);
      currentValue = this.attributes[$key];
      if (key === 'id' && (currentValue != null)) {
        goog.asserts.fail('Model id is immutable');
      }
      if (key === 'clientId' && (currentValue != null)) {
        goog.asserts.fail('Model clientId is immutable');
      }
      this.attributes[$key] = value;
      if (!(value instanceof goog.events.EventTarget)) {
        continue;
      }
      value.setParentEventTarget(this);
    }
  };

  /**
    todo: optimize comparison
    @param {Object} json
    @return {Object}
    @protected
  */


  este.Model.prototype.getChanges = function(json) {
    var changes, key, set, value, _ref;
    changes = null;
    for (key in json) {
      value = json[key];
      set = (_ref = this.schema[key]) != null ? _ref.set : void 0;
      if (set) {
        value = set(value);
      }
      if (este.json.equal(value, this.get(key))) {
        continue;
      }
      if (changes == null) {
        changes = {};
      }
      changes[key] = value;
    }
    return changes;
  };

  /**
    @param {Object} json key is attr, value is its value
    @return {Object}
    @protected
  */


  este.Model.prototype.getErrors = function(json) {
    var errors, key, name, validator, validators, value, _ref, _ref1;
    errors = null;
    for (key in json) {
      value = json[key];
      validators = (_ref = this.schema[key]) != null ? _ref['validators'] : void 0;
      if (!validators) {
        continue;
      }
      for (name in validators) {
        validator = validators[name];
        if (validator(value)) {
          continue;
        }
        if (errors == null) {
          errors = {};
        }
        if ((_ref1 = errors[key]) == null) {
          errors[key] = {};
        }
        errors[key][name] = true;
      }
    }
    return errors;
  };

  /**
    @param {Object} changed
    @protected
  */


  este.Model.prototype.dispatchChangeEvent = function(changed) {
    var changeEvent, updateEvent;
    changeEvent = new este.Model.Event(este.Model.EventType.CHANGE, this);
    changeEvent.model = this;
    changeEvent.changed = changed;
    if (!this.dispatchEvent(changeEvent)) {
      return false;
    }
    updateEvent = new este.Model.Event(este.Model.EventType.UPDATE, this);
    updateEvent.origin = changeEvent;
    return this.dispatchEvent(updateEvent);
  };

  /**
    @param {function(): string=} idGenerator
    @protected
  */


  este.Model.prototype.ensureClientId = function(idGenerator) {
    if (this.get('clientId')) {
      return;
    }
    return this.set('clientId', idGenerator ? idGenerator() : goog.ui.IdGenerator.getInstance().getNextUniqueId());
  };

  

/**
  @fileoverview este.Model.Event.
*/




  

  /**
    @param {string} type Event Type.
    @param {goog.events.EventTarget} target
    @constructor
    @extends {goog.events.Event}
  */


  este.Model.Event = function(type, target) {
    este.Model.Event.superClass_.constructor.call(this, type, target);
  }

  goog.inherits(este.Model.Event, goog.events.Event);

  /**
    @type {este.Model}
  */


  este.Model.Event.prototype.model = null;

  /**
    Changed model attributes.
    @type {Object}
  */


  este.Model.Event.prototype.changed = null;

  /**
    Added models.
    @type {Array.<este.Model>}
  */


  este.Model.Event.prototype.added = null;

  /**
    Removed models.
    @type {Array.<este.Model>}
  */


  este.Model.Event.prototype.removed = null;

  /**
    @type {este.Model.Event}
  */


  este.Model.Event.prototype.origin = null;

  
