// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Fix CoffeeScript compiled code for Closure Compiler.
  Only Class needs to be fixed, because compiler does not like
  immediately-invoked function expressions (IIFE), which has to be
  removed. Note that you can still reference Class without whole namespace.
  It means, you can still write
    Foo.EventType.CLICK
  instead of long
    very.long.namespace.Foo.EventType.CLICK

  Notes
    do not declare class inside function, it does not work (yet)

  There are some edge issues, which will be fixed soon.
    do not use splats with annotations (foo, bla...)
    do not use 'foo in someArray', foo in [a, ...] is ok

  Todo:
    consider http://marijnhaverbeke.nl/blog/acorn.html or similar
    new compiler should be able to parse nested annotations, check it
*/

var exports;

goog.provide('este.dev.CoffeeForClosure');

goog.provide('este.dev.coffeeForClosure');

este.dev.CoffeeForClosure = (function() {
  /**
    @param {string} source
    @constructor
  */

  function CoffeeForClosure(source) {
    this.source = source;
    this.replaces = [];
  }

  /**
    @type {string}
  */


  CoffeeForClosure.random = (function() {
    var x;
    x = 2147483648;
    return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
  })();

  /**
    @type {string}
    @protected
  */


  CoffeeForClosure.prototype.source = '';

  /**
    @type {string}
    @protected
  */


  CoffeeForClosure.prototype.random = '';

  /**
    @type {Array}
    @protected
  */


  CoffeeForClosure.prototype.replaces = null;

  /**
    @return {string}
  */


  CoffeeForClosure.prototype.fixClass = function() {
    var className, lastState, namespace, original, superClass;
    original = this.source;
    this.storeReplaces();
    lastState = null;
    while (true) {
      className = this.getClassName();
      if (!className || lastState === this.source) {
        break;
      }
      lastState = this.source;
      superClass = this.getSuperClass(className);
      if (superClass) {
        this.removeCoffeeExtends(className);
        this.removeInjectedExtendsCode(className);
      } else {
        this.removeClassVar(className);
      }
      namespace = this.getNamespaceFromWrapper(className);
      this.fullQualifyProperties(className, namespace);
      this.fullQualifyConstructor(className, namespace);
      this.fullQualifyNew(className, namespace);
      if (superClass) {
        this.addGoogInherits(className, namespace, superClass);
        this.fixSuperClassReference(className, namespace);
      }
      this.removeWrapper(className, namespace, superClass);
    }
    this.restoreReplaces();
    if (original !== this.source) {
      this.source = "// Coffe Class fixed for Closure Compiler by Este.js\n" + this.source;
    }
    return this.source;
  };

  /**
    @return {string|undefined}
  */


  CoffeeForClosure.prototype.getClassName = function() {
    var _ref;
    return (_ref = this.source.match(/function ([A-Z][\w]*)/)) != null ? _ref[1] : void 0;
  };

  /**
    @param {string} className
    @return {string}
  */


  CoffeeForClosure.prototype.getSuperClass = function(className) {
    var matches, regex;
    regex = new RegExp("return " + className + ";[\\s]*\\}\\)\\(([\\w\\.]+)\\);");
    matches = this.source.match(regex);
    if (!matches) {
      return '';
    }
    return matches[1];
  };

  /**
    @param {string} className
  */


  CoffeeForClosure.prototype.removeCoffeeExtends = function(className) {
    var regex;
    regex = new RegExp("__extends\\(" + className + ", _super\\);", 'g');
    return this.remove(regex);
  };

  /**
    @param {string} className
  */


  CoffeeForClosure.prototype.removeInjectedExtendsCode = function(className) {
    this.remove("var " + className + ",\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };");
    return this.remove("var __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };");
  };

  /**
    @param {string} className
  */


  CoffeeForClosure.prototype.removeClassVar = function(className) {
    var regex;
    regex = new RegExp("var " + className + ";", 'g');
    return this.remove(regex);
  };

  /**
    @param {string|RegExp} value
    @protected
  */


  CoffeeForClosure.prototype.remove = function(value) {
    return this.replace(value, '');
  };

  /**
    @param {string|RegExp} value
    @param {string|Function} string
    @protected
  */


  CoffeeForClosure.prototype.replace = function(value, string) {
    return this.source = this.source.replace(value, string);
  };

  /**
    @param {string} className
    @return {string}
  */


  CoffeeForClosure.prototype.getNamespaceFromWrapper = function(className) {
    var index, letter, letters, regex;
    regex = new RegExp("" + className + " = \\(function\\((_super)?\\) \\{");
    index = this.source.search(regex);
    if (index === -1) {
      return '';
    }
    letters = [];
    while (letter = this.source.charAt(--index)) {
      if (letter === ' ' || letter === ';' || letter === '\n') {
        break;
      }
      letters.unshift(letter);
    }
    return letters.join('');
  };

  /**
    @param {string} className
    @param {string} namespace
  */


  CoffeeForClosure.prototype.fullQualifyProperties = function(className, namespace) {
    var regex,
      _this = this;
    regex = new RegExp(className + '\\.(\\w+)', 'g');
    return this.replace(regex, function(match, prop, offset) {
      if (/[\.\w]/.test(_this.source.charAt(offset - 1))) {
        return match;
      }
      if (prop === className || prop === '__super__') {
        return match;
      }
      return namespace + match;
    });
  };

  /**
    @param {string} className
    @param {string} namespace
  */


  CoffeeForClosure.prototype.fullQualifyConstructor = function(className, namespace) {
    var regex;
    regex = new RegExp("function " + className, 'g');
    if (namespace) {
      return this.replace(regex, namespace + className + ' = function');
    } else {
      return this.replace(regex, 'var ' + className + ' = function');
    }
  };

  /**
    @param {string} className
    @param {string} namespace
  */


  CoffeeForClosure.prototype.fullQualifyNew = function(className, namespace) {
    var regex;
    regex = new RegExp("new " + className, 'g');
    return this.replace(regex, "new " + namespace + className);
  };

  /**
    @param {string} className
    @param {string} namespace
    @param {string} superClass
    @protected
  */


  CoffeeForClosure.prototype.addGoogInherits = function(className, namespace, superClass) {
    var endsWith, i, index, inherits, line, lines, regex, _i, _len;
    regex = new RegExp("" + namespace + className + " = function\\(", 'g');
    index = this.source.search(regex);
    if (index === -1) {
      return;
    }
    lines = this.source.slice(index).split('\n');
    endsWith = function(str, suffix) {
      var l;
      l = str.length - suffix.length;
      return l >= 0 && str.indexOf(suffix, l) === l;
    };
    if (endsWith(lines[0], ') {}')) {
      index += lines[0].length + 1;
    } else {
      for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {
        line = lines[i];
        index += line.length + 1;
        if (line === '  }') {
          break;
        }
      }
    }
    inherits = "\n  goog.inherits(" + (namespace + className) + ", " + superClass + ");\n";
    return this.source = this.source.slice(0, index) + inherits + this.source.slice(index);
  };

  /**
    @param {string} className
    @param {string} namespace
    @protected
  */


  CoffeeForClosure.prototype.fixSuperClassReference = function(className, namespace) {
    var regex;
    regex = new RegExp("" + className + "\\.__super__", 'g');
    return this.replace(regex, "" + namespace + className + "\.superClass_");
  };

  /**
    @param {string} className
    @param {string} namespace
    @param {string} superClass
  */


  CoffeeForClosure.prototype.removeWrapper = function(className, namespace, superClass) {
    var regex;
    regex = new RegExp("" + namespace + className + " = \\(function\\((_super)?\\) \\{");
    this.remove(regex);
    regex = new RegExp("return " + className + ";[\\s]*\\}\\)\\((" + superClass + ")?\\);", 'g');
    return this.remove(regex);
  };

  /**
    @protected
  */


  CoffeeForClosure.prototype.storeReplaces = function() {
    var _this = this;
    this.source = this.source.replace(/\$/g, function(match) {
      return "xn2fs07c6n7ldollar_sucks_for_regexps";
    });
    this.source = this.source.replace(/(["'])(?:(?=(\\?))\2.)*?\1/g, function(match) {
      return "" + CoffeeForClosure.random + (_this.replaces.push(match)) + CoffeeForClosure.random;
    });
    return this.source = this.source.replace(/\/\*[^*]*\*+([^\/][^*]*\*+)*\//g, function(match) {
      return "" + CoffeeForClosure.random + (_this.replaces.push(match)) + CoffeeForClosure.random;
    });
  };

  /**
    @protected
  */


  CoffeeForClosure.prototype.restoreReplaces = function() {
    var i, replace, _i, _len, _ref,
      _this = this;
    _ref = this.replaces;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      replace = _ref[i];
      this.source = this.source.replace("" + CoffeeForClosure.random + (i + 1) + CoffeeForClosure.random, replace);
    }
    this.source = this.source.replace(/xn2fs07c6n7ldollar_sucks_for_regexps/g, function(match) {
      return "$";
    });
  };

  return CoffeeForClosure;

})();

/**
  @param {string} source
*/


este.dev.coffeeForClosure = function(source) {
  var coffeeForClosure;
  coffeeForClosure = new este.dev.CoffeeForClosure(source);
  return coffeeForClosure.fixClass();
};

exports = exports || {};

exports.coffeeForClosure = este.dev.coffeeForClosure;
