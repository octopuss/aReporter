// Generated by CoffeeScript 1.4.0

suite('este.dev.CoffeeForClosure', function() {
  var CoffeeForClosure, closureSource, closureSourceNoNamespace, closureSourceWithExtends, closureSourceWithExtendsNoNamespace, coffeeForClosure, coffeeForClosureNoNamespace, coffeeForClosureWithExtends, coffeeForClosureWithExtendsNoNamespace, coffeeSource, coffeeSourceNoNamespace, coffeeSourceWithExtends, coffeeSourceWithExtendsNoNamespace;
  CoffeeForClosure = este.dev.CoffeeForClosure;
  coffeeForClosure = null;
  coffeeForClosureNoNamespace = null;
  coffeeForClosureWithExtends = null;
  coffeeForClosureWithExtendsNoNamespace = null;
  coffeeSource = null;
  closureSource = null;
  coffeeSourceNoNamespace = null;
  closureSourceNoNamespace = null;
  coffeeSourceWithExtends = null;
  closureSourceWithExtends = null;
  coffeeSourceWithExtendsNoNamespace = null;
  closureSourceWithExtendsNoNamespace = null;
  setup(function() {
    coffeeSource = "// Generated by CoffeeScript 1.3.4\nvar testForString = 'function Person'\nvar testForString = \"function Person\"\n/* function Person */\nif (window == '\"') alert('wtf');\nif (window == \"'\") alert('wtf');\nvar Person;\n\ngoog.provide('example.Person');\ngoog.provide('example.Person.EventType');\n\nexample.Person = (function() {\n  /**\n    @param {string} nam'e\n    @constructor\n  */\n\n  function Person(name) {\n    this.name = name;\n    var foo = bla.Person.isSupported();\n    var foo = bla.SomePerson.isSupported();\n    this.bla = {};\n    this.fok = '$' // dollar sucks for some reason\n  }\n\n  /**\n    @enum {string}\n  */\n\n\n  Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  Person.prototype.name = '';\n\n  Person.prototype.showName = function() {\n    return alert(this.name + Person.EventType);\n  };return Person;\n\n})();";
    closureSource = "// Coffe Class fixed for Closure Compiler by Este.js\n// Generated by CoffeeScript 1.3.4\nvar testForString = 'function Person'\nvar testForString = \"function Person\"\n/* function Person */\nif (window == '\"') alert('wtf');\nif (window == \"'\") alert('wtf');\n\n\ngoog.provide('example.Person');\ngoog.provide('example.Person.EventType');\n\n\n  /**\n    @param {string} nam'e\n    @constructor\n  */\n\n  example.Person = function(name) {\n    this.name = name;\n    var foo = bla.Person.isSupported();\n    var foo = bla.SomePerson.isSupported();\n    this.bla = {};\n    this.fok = '$' // dollar sucks for some reason\n  }\n\n  /**\n    @enum {string}\n  */\n\n\n  example.Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  example.Person.prototype.name = '';\n\n  example.Person.prototype.showName = function() {\n    return alert(this.name + example.Person.EventType);\n  };";
    coffeeSourceWithExtends = "// Generated by CoffeeScript 1.3.3\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\ngoog.provide('example.Person');\n\nexample.Person = (function(_super) {\n\n  __extends(Person, _super);\n\n  /**\n    @param {string} name\n    @constructor\n  */\n\n\n  function Person(name) {}\n\n  /**\n    @enum {string}\n  */\n\n\n  Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  Person.prototype.name = '';\n\n  Person.prototype.showName = function() {\n    var el = goog.dom.createDom('div', null, Person.EventType);\n    Person.__super__.showName.call(this, 'fok');\n    return alert(this.name + Person.EventType);\n  };return Person;\n\n})(este.Foo);";
    closureSourceWithExtends = "// Coffe Class fixed for Closure Compiler by Este.js\n// Generated by CoffeeScript 1.3.3\n\n\ngoog.provide('example.Person');\n\n\n\n  \n\n  /**\n    @param {string} name\n    @constructor\n  */\n\n\n  example.Person = function(name) {}\n\n  goog.inherits(example.Person, este.Foo);\n\n  /**\n    @enum {string}\n  */\n\n\n  example.Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  example.Person.prototype.name = '';\n\n  example.Person.prototype.showName = function() {\n    var el = goog.dom.createDom('div', null, example.Person.EventType);\n    example.Person.superClass_.showName.call(this, 'fok');\n    return alert(this.name + example.Person.EventType);\n  };";
    coffeeSourceWithExtendsNoNamespace = "// Generated by CoffeeScript 1.3.3\nvar Person,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\ngoog.provide('Person');\n\nPerson = (function(_super) {\n\n  __extends(Person, _super);\n\n  /**\n    @param {string} name\n    @constructor\n  */\n\n\n  function Person(name) {\n    this.name = name;\n    Person.__super__.constructor.call(this, this.name);\n  }\n\n  /**\n    @enum {string}\n  */\n\n\n  Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  Person.prototype.name = '';\n\n  Person.prototype.showName = function() {\n    Person.__super__.showName.call(this, 'fok');\n    return alert(this.name + Person.EventType);\n  };\n\n  return Person;\n\n})(Foo);";
    closureSourceWithExtendsNoNamespace = "// Coffe Class fixed for Closure Compiler by Este.js\n// Generated by CoffeeScript 1.3.3\n\n\ngoog.provide('Person');\n\n\n\n  \n\n  /**\n    @param {string} name\n    @constructor\n  */\n\n\n  var Person = function(name) {\n    this.name = name;\n    Person.superClass_.constructor.call(this, this.name);\n  }\n\n  goog.inherits(Person, Foo);\n\n  /**\n    @enum {string}\n  */\n\n\n  Person.EventType = {\n    'FOO': 'foo'\n  };\n\n  /**\n    @type {string}\n  */\n\n\n  Person.prototype.name = '';\n\n  Person.prototype.showName = function() {\n    Person.superClass_.showName.call(this, 'fok');\n    return alert(this.name + Person.EventType);\n  };\n\n  ";
    coffeeSourceNoNamespace = coffeeSource.replace(/example\./g, '');
    coffeeSourceNoNamespace = 'var Person;' + coffeeSourceNoNamespace;
    closureSourceNoNamespace = closureSource.replace(/example\./g, '').replace(/Person = function\(/g, 'var Person = function(');
    coffeeForClosure = new este.dev.CoffeeForClosure(coffeeSource);
    coffeeForClosureNoNamespace = new este.dev.CoffeeForClosure(coffeeSourceNoNamespace);
    coffeeForClosureWithExtends = new este.dev.CoffeeForClosure(coffeeSourceWithExtends);
    return coffeeForClosureWithExtendsNoNamespace = new este.dev.CoffeeForClosure(coffeeSourceWithExtendsNoNamespace);
  });
  suite('constructor', function() {
    return test('should work', function() {
      assert.instanceOf(coffeeForClosure, este.dev.CoffeeForClosure);
      assert.instanceOf(coffeeForClosureNoNamespace, este.dev.CoffeeForClosure);
      return assert.instanceOf(coffeeForClosureWithExtends, este.dev.CoffeeForClosure);
    });
  });
  suite('getClassName', function() {
    return test('should found constructor and parse its name', function() {
      var className;
      className = coffeeForClosure.getClassName();
      assert.equal(className, 'Person');
      className = coffeeForClosureNoNamespace.getClassName();
      assert.equal(className, 'Person');
      className = coffeeForClosureWithExtends.getClassName();
      return assert.equal(className, 'Person');
    });
  });
  suite('getSuperClass', function() {
    return test('should found super class if defined', function() {
      var className;
      className = coffeeForClosure.getSuperClass('Person');
      assert.equal(className, '');
      className = coffeeForClosureNoNamespace.getSuperClass('Person');
      assert.equal(className, '');
      className = coffeeForClosureWithExtends.getSuperClass('Person');
      return assert.equal(className, 'este.Foo');
    });
  });
  suite('getNamespaceFromWrapper', function() {
    return test('should found wrapper and parse namespace', function() {
      var namespace;
      namespace = coffeeForClosure.getNamespaceFromWrapper('Person');
      assert.equal(namespace, 'example.');
      namespace = coffeeForClosureNoNamespace.getNamespaceFromWrapper('Person');
      assert.equal(namespace, '');
      namespace = coffeeForClosureWithExtends.getNamespaceFromWrapper('Person');
      return assert.equal(namespace, 'example.');
    });
  });
  suite('fixClass', function() {
    return test('should work', function() {
      var fixed;
      fixed = coffeeForClosure.fixClass();
      assert.equal(fixed, closureSource);
      fixed = coffeeForClosureNoNamespace.fixClass();
      assert.equal(fixed, closureSourceNoNamespace);
      fixed = coffeeForClosureWithExtends.fixClass();
      assert.equal(fixed, closureSourceWithExtends);
      fixed = coffeeForClosureWithExtendsNoNamespace.fixClass();
      return assert.equal(fixed, closureSourceWithExtendsNoNamespace);
    });
  });
  return suite('comment in string', function() {
    return test('should work', function() {
      var fixed, jsCode;
      jsCode = "document.body.appendChild(box);\nvar str = \"/**\n  @desc Text shown in alert after click.\n*/\"\n\napp.MSG_THANKYOU = goog.getMsg('Thank you!');\nreturn goog.events.listen(box, 'click', function() {";
      fixed = este.dev.coffeeForClosure(jsCode);
      return assert.equal(jsCode, fixed);
    });
  });
});
