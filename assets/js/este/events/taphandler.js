// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview TapHandler is general tap event both for mobile and desktop.
  For touch devices, touchstart is used, which fixes 300ms click delay.
  This approach is also known as FastButton, but TapHandler implementation
  is better, because works fine with native mobile scroll momentum.

  todo
    simulate native behavior on middle/right-click and when ctrl or command are
    pressed (e.button != 1, e.ctrlKey, e.metaKey)
*/



goog.provide('este.events.TapHandler');

goog.provide('este.events.TapHandler.EventType');

goog.require('este.Base');

goog.require('este.mobile');

goog.require('goog.dom');

goog.require('goog.math.Coordinate');

goog.require('goog.userAgent');



  

  /**
    @param {Element} element
    @param {boolean=} touchSupported
    @constructor
    @extends {este.Base}
  */


  este.events.TapHandler = function(element, touchSupported) {
    this.element = element;
    este.events.TapHandler.superClass_.constructor.apply(this, arguments);
    this.registerEvents(touchSupported);
  }

  goog.inherits(este.events.TapHandler, este.Base);

  /**
    @type {number}
  */


  este.events.TapHandler.prototype.touchMoveSnap = 10;

  /**
    @type {number}
  */


  este.events.TapHandler.prototype.touchEndTimeout = 10;

  /**
    @enum {string}
  */


  este.events.TapHandler.EventType = {
    START: 'start',
    END: 'end',
    TAP: 'tap'
  };

  /**
    Touchstart on iOS<5 slowdown native scrolling, 4.3.2 does not fire
    touchstart on search input field etc..., so that's why iOS5 is required.
    todo: check Android
    @return {boolean}
  */


  este.events.TapHandler.touchSupported = function() {
    if (!goog.userAgent.MOBILE) {
      return false;
    }
    return !este.mobile.iosVersion || este.mobile.iosVersion >= 5;
  };

  /**
    @param {goog.events.BrowserEvent} e
    @return {!goog.math.Coordinate}
  */


  este.events.TapHandler.getTouchClients = function(e) {
    var touches;
    touches = e.getBrowserEvent().touches[0];
    return new goog.math.Coordinate(touches.clientX, touches.clientY);
  };

  /**
    @param {Node} target
    @return {Node}
  */


  este.events.TapHandler.ensureTargetIsElement = function(target) {
    if (target.nodeType === 3) {
      target = target.parentNode;
    }
    return target;
  };

  /**
    @type {Element}
    @protected
  */


  este.events.TapHandler.prototype.element = null;

  /**
    @type {goog.math.Coordinate}
    @protected
  */


  este.events.TapHandler.prototype.coordinate = null;

  /**
    @type {boolean}
    @protected
  */


  este.events.TapHandler.prototype.scrolled = false;

  /**
    @return {Element}
  */


  este.events.TapHandler.prototype.getElement = function() {
    return this.element;
  };

  /**
    @param {boolean=} touchSupported
    @protected
  */


  este.events.TapHandler.prototype.registerEvents = function(touchSupported) {
    var scrollElement;
    if (touchSupported != null ? touchSupported : este.events.TapHandler.touchSupported()) {
      scrollElement = this.element.tagName === 'BODY' ? goog.dom.getWindow(this.element.ownerDocument) : this.element;
      return this.getHandler().listen(this.element, 'touchstart', this.onTouchStart).listen(scrollElement, 'scroll', this.onScroll);
    } else {
      return this.getHandler().listen(this.element, 'click', this.onClick);
    }
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.events.TapHandler.prototype.onTouchStart = function(e) {
    this.coordinate = este.events.TapHandler.getTouchClients(e);
    this.scrolled = false;
    this.enableTouchMoveEndEvents(true);
    return this.dispatchTapEvent(este.events.TapHandler.EventType.START, e.target);
  };

  /**
    @param {boolean} enable
    @protected
  */


  este.events.TapHandler.prototype.enableTouchMoveEndEvents = function(enable) {
    var html;
    html = this.element.ownerDocument.documentElement;
    if (enable) {
      return this.getHandler().listen(html, 'touchmove', this.onTouchMove).listen(this.element, 'touchend', this.onTouchEnd);
    } else {
      return this.getHandler().unlisten(html, 'touchmove', this.onTouchMove).unlisten(this.element, 'touchend', this.onTouchEnd);
    }
  };

  /**
    @param {string} type
    @param {Node} target
    @protected
  */


  este.events.TapHandler.prototype.dispatchTapEvent = function(type, target) {
    target = este.events.TapHandler.ensureTargetIsElement(target);
    if (!target) {
      return;
    }
    return this.dispatchEvent({
      type: type,
      target: target
    });
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.events.TapHandler.prototype.onTouchMove = function(e) {
    var distance;
    if (!(this.coordinate != null)) {
      return;
    }
    distance = goog.math.Coordinate.distance(this.coordinate, este.events.TapHandler.getTouchClients(e));
    if (distance < this.touchMoveSnap) {
      return;
    }
    this.dispatchTapEvent(este.events.TapHandler.EventType.END, e.target);
    return this.enableTouchMoveEndEvents(false);
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.events.TapHandler.prototype.onTouchEnd = function(e) {
    var target,
      _this = this;
    target = e.target;
    this.enableTouchMoveEndEvents(false);
    return setTimeout(function() {
      _this.dispatchTapEvent(este.events.TapHandler.EventType.END, target);
      if (_this.scrolled) {
        return;
      }
      return _this.dispatchTapEvent(este.events.TapHandler.EventType.TAP, target);
    }, this.touchEndTimeout);
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.events.TapHandler.prototype.onScroll = function(e) {
    return this.scrolled = true;
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.events.TapHandler.prototype.onClick = function(e) {
    this.dispatchTapEvent(este.events.TapHandler.EventType.START, e.target);
    this.dispatchTapEvent(este.events.TapHandler.EventType.END, e.target);
    return this.dispatchTapEvent(este.events.TapHandler.EventType.TAP, e.target);
  };

  
