// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Event matched by a simple selector, ex.:
  handler = new este.events.MatchedHandler el, [
    id: 123
    container: efn47v2hm63h1efn47v2hm63h
    child: efn47v2hm63h2efn47v2hm63h
    link: efn47v2hm63h3efn47v2hm63h
  , ..
  ]
  goog.events.listen handler, efn47v2hm63h4efn47v2hm63h, (e) ->
    #e.id == 123
    #e.childIndex = 1
*/



goog.provide('este.events.MatchedHandler');

goog.provide('este.events.MatchedHandler.create');

goog.provide('este.events.MatchedHandler.Matcher');

goog.require('goog.events.EventTarget');

goog.require('este.dom');



  

  /**
    @param {Element} element
    @param {Array.<este.events.MatchedHandler.Matcher>} matchers
    @param {Function} getChildIndex
    @param {string=} opt_eventType
    @constructor
    @extends {goog.events.EventTarget}
  */


  este.events.MatchedHandler = function(element, matchers, getChildIndex, opt_eventType) {
    this.element = element;
    this.matchers = matchers;
    this.getChildIndex = getChildIndex;
    este.events.MatchedHandler.superClass_.constructor.call(this);
    this.listenKey_ = goog.events.listen(this.element, opt_eventType != null ? opt_eventType : 'click', this);
    return;
  }

  goog.inherits(este.events.MatchedHandler, goog.events.EventTarget);

  /**
    @param {Element} element
    @param {Array.<este.events.MatchedHandler.Matcher>} matchers
    @return {este.events.MatchedHandler}
  */


  este.events.MatchedHandler.create = function(element, matchers) {
    return new este.events.MatchedHandler(element, matchers, este.events.MatchedHandler.getChildIndex);
  };

  /**
    Compute child index, no CSS selector engine, solid and fast.
    @param {Element} container
    @param {Element} child
    @param {string} childMatcher
    @return {number}
  */


  este.events.MatchedHandler.getChildIndex = function(container, child, childMatcher) {
    var index, item, _i, _len, _ref;
    index = 0;
    _ref = goog.array.toArray(container.getElementsByTagName('*'));
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (este.dom.match(item, childMatcher)) {
        if (item === child) {
          return index;
        }
        index++;
      }
    }
    return -1;
  };

  /**
    @type {Element}
  */


  este.events.MatchedHandler.prototype.element = null;

  /**
    @type {Array.<este.events.MatchedHandler.Matcher>}
  */


  este.events.MatchedHandler.prototype.matchers = null;

  /**
    @type {Function}
  */


  este.events.MatchedHandler.prototype.getChildIndex = null;

  /**
    @type {?number}
    @private
  */


  este.events.MatchedHandler.prototype.listenKey_ = null;

  /**
    @param {goog.events.BrowserEvent} e
  */


  este.events.MatchedHandler.prototype.handleEvent = function(e) {
    var ancestor, ancestors, child, childIndex, container, index, matcher, matchers, target, _i, _j, _len, _len1, _ref;
    target = e.target;
    ancestors = este.dom.getAncestors(target, true, true);
    _ref = this.matchers;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      matcher = _ref[_i];
      matchers = [matcher['link'], matcher['child'], matcher['container']];
      container = null;
      child = null;
      index = 0;
      for (_j = 0, _len1 = ancestors.length; _j < _len1; _j++) {
        ancestor = ancestors[_j];
        if (container) {
          break;
        }
        if (!este.dom.match(ancestor, matchers[index])) {
          continue;
        }
        switch (index) {
          case 1:
            child = ancestor;
            break;
          case 2:
            container = ancestor;
        }
        index++;
      }
      if (!container) {
        continue;
      }
      childIndex = this.getChildIndex(container, child, matcher['child']);
      this.dispatchEvent({
        target: target,
        type: e.type,
        id: matcher['id'],
        childIndex: childIndex
      });
      return;
    }
    ancestors.reverse();
    return this.dispatchEvent({
      target: target,
      type: e.type,
      domPath: este.dom.getDomPath(ancestors)
    });
  };

  /**
    @override
  */


  este.events.MatchedHandler.prototype.disposeInternal = function() {
    este.events.MatchedHandler.superClass_.disposeInternal.call(this);
    goog.events.unlistenByKey(this.listenKey_);
    delete this.listenKey_;
  };

  

/**
  @typedef {{id: string, container: string, child: string, link: string}}
*/


este.events.MatchedHandler.Matcher;
