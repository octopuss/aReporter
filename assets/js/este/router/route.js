// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview este.router.Route.
*/

goog.provide('este.router.Route');

goog.require('este.string');


  /**
    @param {string} path
    @param {Function} show
    @param {este.router.Route.Options=} options
    @constructor
  */

  este.router.Route = function(path, show, options) {
    this.path = path;
    this.show = show;
    this.hide = options != null ? options.hide : void 0;
    this.keys = [];
    this.pathToRegexp(options != null ? options.sensitive : void 0, options != null ? options.strict : void 0);
  }

  /**
    @param {string} path
    @param {Object=} params
    @return {string}
  */


  este.router.Route.getUrl = function(path, params) {
    var index, key, regex, value, _ref;
    if (params == null) {
      params = {};
    }
    if (params.length) {
      index = 0;
      path = path.replace(/\*/g, function() {
        return params[index++];
      });
    } else {
      for (key in params) {
        value = params[key];
        if (value === void 0) {
          value = '';
        }
        regex = new RegExp("\\:" + key);
        path = path.replace(regex, value);
      }
    }
    if (path.charAt(path.length - 1) === '?') {
      path = path.slice(0, -1);
    }
    if ((_ref = path.charAt(path.length - 1)) === '/' || _ref === '.') {
      path = path.slice(0, -1);
    }
    return este.string.stripSlashHashPrefixes(path);
  };

  /**
    - sensitive: if routing is case sensitive
    - strict: todo
    - hide: callback
    @typedef {{
      sensitive: (boolean|undefined),
      strict: (boolean|undefined),
      hide: (Function|undefined)
    }}
  */


  este.router.Route.Options;

  /**
    @type {string}
  */


  este.router.Route.prototype.path = '';

  /**
    @type {Function}
    @protected
  */


  este.router.Route.prototype.show = null;

  /**
    @type {Function|undefined}
    @protected
  */


  este.router.Route.prototype.hide = null;

  /**
    @type {RegExp}
    @protected
  */


  este.router.Route.prototype.regexp = null;

  /**
    @type {Array.<Object>}
    @protected
  */


  este.router.Route.prototype.keys = null;

  /**
    @param {string} path
    @param {boolean} isNavigation
    @param {boolean=} forceHide
    @return {boolean} true if route was matched
  */


  este.router.Route.prototype.process = function(path, isNavigation, forceHide) {
    var matches, params;
    if (forceHide == null) {
      forceHide = false;
    }
    if (!forceHide) {
      matches = this.getMatches(path);
      if (matches) {
        params = this.getParams(matches);
        this.show(params, isNavigation);
        return true;
      }
    }
    if (this.hide) {
      this.hide();
    }
    return false;
  };

  /**
    @param {Object=} params
    @return {string}
  */


  este.router.Route.prototype.getUrl = function(params) {
    if (params == null) {
      params = {};
    }
    return este.router.Route.getUrl(this.path, params);
  };

  /**
    @param {boolean=} sensitive
    @param {boolean=} strict
    @protected
  */


  este.router.Route.prototype.pathToRegexp = function(sensitive, strict) {
    var regexPath,
      _this = this;
    regexPath = this.path.concat(strict ? '' : '/?').replace(/\/\(/g, '(?:/').replace(/\+/g, '__plus__').replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, function(_, slash, format, key, capture, optional) {
      _this.keys.push({
        name: key,
        optional: !!optional
      });
      slash || (slash = '');
      return (optional ? '' : slash) + '(?:' + (optional ? slash : '') + (format || '') + (capture || (format && '([^/.]+?)' || '([^/]+?)')) + ')' + (optional || '');
    }).replace(/([\/.])/g, '\\$1').replace(/__plus__/g, '(.+)').replace(/\*/g, '(.*)');
    return this.regexp = new RegExp("^" + regexPath + "$", sensitive ? '' : 'i');
  };

  /**
    @param {string} path
    @return {Array.<string>}
    @protected
  */


  este.router.Route.prototype.getMatches = function(path) {
    var pathname, qsIndex;
    qsIndex = path.indexOf('?');
    pathname = qsIndex > -1 ? path.slice(0, qsIndex) : path;
    return this.regexp.exec(pathname);
  };

  /**
    @param {Array.<string>} matches
    @return {Object|Array}
    @protected
  */


  este.router.Route.prototype.getParams = function(matches) {
    var i, key, match, params, value, _i, _len;
    params = null;
    for (i = _i = 0, _len = matches.length; _i < _len; i = ++_i) {
      match = matches[i];
      if (!i) {
        continue;
      }
      key = this.keys[i - 1];
      value = typeof match === 'string' ? decodeURIComponent(match) : match;
      if (key) {
        if (params == null) {
          params = {};
        }
        params[key.name] = value;
      } else {
        if (params == null) {
          params = [];
        }
        params.push(value);
      }
    }
    return params;
  };

  
