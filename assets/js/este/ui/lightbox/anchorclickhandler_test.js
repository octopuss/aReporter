// Generated by CoffeeScript 1.4.0

suite('este.ui.lightbox.AnchorClickHandler', function() {
  var AnchorClickHandler, element, fireClick, handler;
  AnchorClickHandler = este.ui.lightbox.AnchorClickHandler;
  element = null;
  handler = null;
  setup(function() {
    element = document.createElement('div');
    handler = new AnchorClickHandler;
    return handler.decorate(element);
  });
  fireClick = function(event) {
    var _ref;
    if ((_ref = event.preventDefault) == null) {
      event.preventDefault = function() {};
    }
    return goog.events.fireListeners(element, 'click', false, event);
  };
  suite('decorate', function() {
    test('should register click event', function() {
      var listeners;
      listeners = goog.events.getListeners(element, 'click', false);
      return assert.lengthOf(listeners, 1);
    });
    return test('should register click event via enterDocument', function() {
      var listeners;
      handler.exitDocument();
      listeners = goog.events.getListeners(element, 'click', false);
      assert.lengthOf(listeners, 0);
      handler.enterDocument();
      listeners = goog.events.getListeners(element, 'click', false);
      return assert.lengthOf(listeners, 1);
    });
  });
  suite('click should prevent default action', function() {
    test('on anchor with lightbox rel attribute', function(done) {
      return fireClick({
        target: {
          tagName: 'A',
          rel: 'lightbox'
        },
        preventDefault: function() {
          return done();
        }
      });
    });
    return test('on element inside of anchor with lightbox rel attribute', function(done) {
      return fireClick({
        target: {
          parentNode: {
            tagName: 'A',
            rel: 'lightbox'
          }
        },
        preventDefault: function() {
          return done();
        }
      });
    });
  });
  suite('click should NOT prevent default action', function() {
    test('on not anchor element without lightbox rel attribute', function() {
      var called;
      called = false;
      fireClick({
        target: {},
        preventDefault: function() {
          return called = true;
        }
      });
      return assert.isFalse(called);
    });
    return test('on element inside of not anchor element without lightbox rel attribute', function() {
      var called;
      called = false;
      fireClick({
        target: {
          parentNode: {}
        },
        preventDefault: function() {
          return called = true;
        }
      });
      return assert.isFalse(called);
    });
  });
  return suite('click on anchor', function() {
    test('should call element.querySelectorAll', function(done) {
      element.querySelectorAll = function(query) {
        assert.equal(query, "a[rel='lightbox[Page1]']");
        return done();
      };
      return fireClick({
        target: {
          tagName: 'A',
          rel: 'lightbox[Page1]'
        }
      });
    });
    return test('should dispatch click event with array of anchors and current anchor', function(done) {
      var anchors, currentAnchor;
      currentAnchor = {
        tagName: 'A',
        rel: 'lightbox[Page1]'
      };
      anchors = [1, 2];
      element.querySelectorAll = function(query) {
        return anchors;
      };
      goog.events.listenOnce(handler, 'click', function(e) {
        assert.equal(e.anchors, anchors);
        assert.equal(e.currentAnchor, currentAnchor);
        return done();
      });
      return fireClick({
        target: currentAnchor
      });
    });
  });
});
