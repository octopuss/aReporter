// Generated by CoffeeScript 1.4.0

suite('este.ui.lightbox.View', function() {
  var KeyCodes, View, anchors, fireDocumentKeydownEvent, fireViewElementClickEvent, firstAnchor, htmlFirstAnchor, htmlSecondAnchor, normalizeHTML, secondAnchor, view;
  View = este.ui.lightbox.View;
  KeyCodes = goog.events.KeyCodes;
  normalizeHTML = function(str) {
    return str.replace(/\s+/g, ' ');
  };
  htmlFirstAnchor = normalizeHTML("		<div class='e-ui-lightbox-background'></div>		<div class='e-ui-lightbox-content'>			<div class='e-ui-lightbox-image-wrapper'>				<img class='e-ui-lightbox-image' src='0'>				<div class='e-ui-lightbox-title'>a</div>			</div>		</div>		<div class='e-ui-lightbox-sidebar'>			<button class='e-ui-lightbox-previous e-ui-lightbox-disabled'>previous</button>			<button class='e-ui-lightbox-next'>next</button>			<div class='e-ui-lightbox-numbers'>				<span class='e-ui-lightbox-current'>1</span>/				<span class='e-ui-lightbox-total'>2</span>			</div>			<button class='e-ui-lightbox-close'>close</button>		</div>");
  htmlSecondAnchor = normalizeHTML("		<div class='e-ui-lightbox-background'></div>		<div class='e-ui-lightbox-content'>			<div class='e-ui-lightbox-image-wrapper'>				<img class='e-ui-lightbox-image' src='1'>				<div class='e-ui-lightbox-title'>b</div>			</div>		</div>		<div class='e-ui-lightbox-sidebar'>			<button class='e-ui-lightbox-previous'>previous</button>			<button class='e-ui-lightbox-next e-ui-lightbox-disabled'>next</button>			<div class='e-ui-lightbox-numbers'>				<span class='e-ui-lightbox-current'>2</span>/				<span class='e-ui-lightbox-total'>2</span>			</div>			<button class='e-ui-lightbox-close'>close</button>		</div>");
  firstAnchor = null;
  secondAnchor = null;
  anchors = null;
  view = null;
  setup(function() {
    firstAnchor = {
      href: 0,
      title: 'a'
    };
    secondAnchor = {
      href: 1,
      title: 'b'
    };
    anchors = [firstAnchor, secondAnchor];
    view = new View(firstAnchor, anchors);
    return view.render();
  });
  fireViewElementClickEvent = function(className) {
    return goog.events.fireListeners(view.getElement(), 'click', false, {
      target: {
        className: 'e-ui-lightbox-' + className
      }
    });
  };
  fireDocumentKeydownEvent = function(keyCode) {
    return goog.events.fireListeners(view.dom_.getDocument(), 'keydown', false, {
      keyCode: keyCode != null ? keyCode : KeyCodes.ESC
    });
  };
  suite('View.create()', function() {
    return test('should return instance with assigned properties', function() {
      view = View.create(firstAnchor, anchors);
      assert.instanceOf(view, View);
      assert.equal(view.currentAnchor, firstAnchor);
      return assert.equal(view.anchors, anchors);
    });
  });
  suite('render()', function() {
    test('should create element with class lightbox', function() {
      return assert.equal(view.getElement().className, 'e-ui-lightbox');
    });
    return test('should create element with defined innerHTML', function() {
      return assert.equal(normalizeHTML(view.getElement().innerHTML), htmlFirstAnchor);
    });
  });
  suite('click on button with class', function() {
    test('.next should set currentAnchor to secondAnchor', function() {
      fireViewElementClickEvent('next');
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('.next should update innerHTML', function() {
      fireViewElementClickEvent('next');
      return assert.equal(normalizeHTML(view.getElement().innerHTML), htmlSecondAnchor);
    });
    test('.next two times, should set currentAnchor to secondAnchor', function() {
      fireViewElementClickEvent('next');
      fireViewElementClickEvent('next');
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('.previous should should set currentAnchor back to firstAnchor', function() {
      fireViewElementClickEvent('next');
      fireViewElementClickEvent('next');
      fireViewElementClickEvent('previous');
      return assert.equal(view.currentAnchor, firstAnchor);
    });
    return test('.previous should not change currentAnchor', function() {
      fireViewElementClickEvent('previous');
      return assert.equal(view.currentAnchor, firstAnchor);
    });
  });
  suite('keydown on horizontal key', function() {
    test('right arrow should set currentAnchor to secondAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('right arrow should update innerHTML', function() {
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      return assert.equal(normalizeHTML(view.getElement().innerHTML), htmlSecondAnchor);
    });
    test('right arrow two times, should set currentAnchor to secondAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('left arrow should should set currentAnchor back to firstAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      fireDocumentKeydownEvent(KeyCodes.RIGHT);
      fireDocumentKeydownEvent(KeyCodes.LEFT);
      return assert.equal(view.currentAnchor, firstAnchor);
    });
    return test('left arrow should not change currentAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.LEFT);
      return assert.equal(view.currentAnchor, firstAnchor);
    });
  });
  suite('keydown on vertical key', function() {
    test('down arrow should set currentAnchor to secondAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('down arrow should update innerHTML', function() {
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      return assert.equal(normalizeHTML(view.getElement().innerHTML), htmlSecondAnchor);
    });
    test('down arrow two times, should set currentAnchor to secondAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      return assert.equal(view.currentAnchor, secondAnchor);
    });
    test('up arrow should should set currentAnchor back to firstAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      fireDocumentKeydownEvent(KeyCodes.DOWN);
      fireDocumentKeydownEvent(KeyCodes.UP);
      return assert.equal(view.currentAnchor, firstAnchor);
    });
    return test('up arrow should not change currentAnchor', function() {
      fireDocumentKeydownEvent(KeyCodes.UP);
      return assert.equal(view.currentAnchor, firstAnchor);
    });
  });
  suite('click on button with class .close', function() {
    return test('should dispatch close event', function(done) {
      goog.events.listenOnce(view, 'close', function() {
        return done();
      });
      return fireViewElementClickEvent('close');
    });
  });
  return suite('keydown on document with key esc', function() {
    return test('should dispatch close event', function(done) {
      goog.events.listenOnce(view, 'close', function() {
        return done();
      });
      return fireDocumentKeydownEvent();
    });
  });
});
