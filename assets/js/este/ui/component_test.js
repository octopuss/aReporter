// Generated by CoffeeScript 1.4.0

suite('este.ui.Component', function() {
  var Component, component;
  Component = este.ui.Component;
  component = null;
  setup(function() {
    return component = new Component;
  });
  suite('constructor', function() {
    return test('should work', function() {
      return assert.instanceOf(component, Component);
    });
  });
  suite('on', function() {
    test('should alias getHandler().listen', function(done) {
      component.enterDocument();
      component.getHandler = function() {
        return {
          listen: function(a, b, c, d, e) {
            assert.equal(a, 1);
            assert.equal(b, 2);
            assert.equal(c, 3);
            assert.equal(d, 4);
            assert.equal(e, 5);
            return done();
          }
        };
      };
      return component.on(1, 2, 3, 4, 5);
    });
    test('should throw exception if called outside of document', function(done) {
      try {
        return component.on({
          attachEvent: function() {}
        }, 'foo', function() {});
      } catch (e) {
        return done();
      }
    });
    return test('should not throw exception if called in document', function() {
      var called;
      called = false;
      component.enterDocument();
      try {
        component.on({
          attachEvent: function() {}
        }, 'foo', function() {});
      } catch (e) {
        called = true;
      }
      return assert.isFalse(called);
    });
  });
  suite('off', function() {
    return test('should alias getHandler().unlisten', function(done) {
      component.getHandler = function() {
        return {
          unlisten: function(a, b, c, d, e) {
            assert.equal(a, 1);
            assert.equal(b, 2);
            assert.equal(c, 3);
            assert.equal(d, 4);
            assert.equal(e, 5);
            return done();
          }
        };
      };
      return component.off(1, 2, 3, 4, 5);
    });
  });
  return suite('delegate', function() {
    suite('dom events', function() {
      test('should delegate to element by selector', function(done) {
        component.render();
        component.delegate('#foo', 'click', function() {
          return done();
        });
        return goog.events.fireListeners(component.getElement(), 'click', false, {
          type: 'click',
          target: {
            id: 'foo'
          }
        });
      });
      test('should delegate to element by selector via parent', function(done) {
        component.render();
        component.delegate('#foo', 'click', function() {
          return done();
        });
        return goog.events.fireListeners(component.getElement(), 'click', false, {
          type: 'click',
          target: {
            parentNode: {
              id: 'foo'
            }
          }
        });
      });
      test('should delegate to element by selector more types', function() {
        var calls, fn;
        calls = 0;
        component.render();
        fn = function() {
          return calls++;
        };
        component.delegate('#foo', ['mousedown', 'mouseup'], fn);
        goog.events.fireListeners(component.getElement(), 'mousedown', false, {
          type: 'mousedown',
          target: {
            id: 'foo'
          }
        });
        goog.events.fireListeners(component.getElement(), 'mouseup', false, {
          type: 'mouseup',
          target: {
            id: 'foo'
          }
        });
        return assert.equal(calls, 2);
      });
      return test('should be disposed after exitDocument', function() {
        var called, listenerCount;
        called = false;
        listenerCount = goog.events.getTotalListenerCount();
        component.render();
        component.delegate('#foo', 'click', function() {
          return called = true;
        });
        component.exitDocument();
        goog.events.fireListeners(component.getElement(), 'click', false, {
          type: 'click',
          target: {
            id: 'foo'
          }
        });
        assert.isFalse(called);
        return assert.equal(goog.events.getTotalListenerCount(), listenerCount);
      });
    });
    suite('key events', function() {
      test('should delegate to element by selector', function(done) {
        component.render();
        component.delegate('.foo', 13, function() {
          return done();
        });
        return goog.events.fireListeners(component.keyHandler, 'key', false, {
          type: 'key',
          keyCode: 13,
          target: {
            className: 'foo'
          }
        });
      });
      test('should delegate to element by selector via parent', function(done) {
        component.render();
        component.delegate('.foo', 13, function() {
          return done();
        });
        return goog.events.fireListeners(component.keyHandler, 'key', false, {
          type: 'key',
          keyCode: 13,
          target: {
            parentNode: {
              className: 'foo'
            }
          }
        });
      });
      return test('should be disposed after exitDocument', function() {
        var disposeCalled, listenerCount;
        listenerCount = goog.events.getTotalListenerCount();
        component.render();
        component.delegate('.foo', 13, function() {});
        disposeCalled = false;
        component.keyHandler.dispose = function() {
          disposeCalled = true;
          return goog.base(this, 'dispose');
        };
        component.exitDocument();
        assert.isTrue(disposeCalled);
        return assert.equal(goog.events.getTotalListenerCount(), listenerCount);
      });
    });
    suite('tap events', function() {
      test('should delegate to element by selector', function(done) {
        component.render();
        component.delegate('.foo', 'tap', function() {
          return done();
        });
        return goog.events.fireListeners(component.tapHandler, 'tap', false, {
          type: 'tap',
          target: {
            className: 'foo'
          }
        });
      });
      test('should delegate to element by selector via parent', function(done) {
        component.render();
        component.delegate('.foo', 'tap', function() {
          return done();
        });
        return goog.events.fireListeners(component.tapHandler, 'tap', false, {
          type: 'key',
          keyCode: 'tap',
          target: {
            parentNode: {
              className: 'foo'
            }
          }
        });
      });
      return test('should be disposed after exitDocument', function() {
        var disposeCalled, listenerCount;
        listenerCount = goog.events.getTotalListenerCount();
        component.render();
        component.delegate('.foo', 'tap', function() {});
        disposeCalled = false;
        component.tapHandler.dispose = function() {
          disposeCalled = true;
          return goog.base(this, 'dispose');
        };
        component.exitDocument();
        assert.isTrue(disposeCalled);
        return assert.equal(goog.events.getTotalListenerCount(), listenerCount);
      });
    });
    return suite('submit events', function() {
      test('should delegate to element by selector', function(done) {
        component.render();
        component.delegate('.foo', 'submit', function() {
          return done();
        });
        return goog.events.fireListeners(component.submitHandler, 'submit', false, {
          type: 'submit',
          target: {
            className: 'foo'
          }
        });
      });
      test('should delegate to element by selector via parent', function(done) {
        component.render();
        component.delegate('.foo', 'submit', function() {
          return done();
        });
        return goog.events.fireListeners(component.submitHandler, 'submit', false, {
          type: 'key',
          keyCode: 'submit',
          target: {
            parentNode: {
              className: 'foo'
            }
          }
        });
      });
      return test('should be disposed after exitDocument', function() {
        var disposeCalled, listenerCount;
        listenerCount = goog.events.getTotalListenerCount();
        component.render();
        component.delegate('.foo', 'submit', function() {});
        disposeCalled = false;
        component.submitHandler.dispose = function() {
          disposeCalled = true;
          return goog.base(this, 'dispose');
        };
        component.exitDocument();
        assert.isTrue(disposeCalled);
        return assert.equal(goog.events.getTotalListenerCount(), listenerCount);
      });
    });
  });
});
