// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Add several usefull events related features.
  @see ../demos/component.html

  Features
    on/off aliases for getHandler().listen, getHandler().unlisten
    on is allowed only if component is in document (because exitDocument)
    delegate method (event bubbling)
      DOM events
      key (keyHandler)
      focus blur
      tap
      submit
*/



goog.provide('este.ui.Component');

goog.require('este.dom');

goog.require('este.events.Delegation');

goog.require('este.events.SubmitHandler');

goog.require('este.events.TapHandler');

goog.require('goog.asserts');

goog.require('goog.events.KeyHandler');

goog.require('goog.ui.Component');



  

  /**
    Default implementation of este UI component.
    @param {goog.dom.DomHelper=} domHelper Optional DOM helper.
    @constructor
    @extends {goog.ui.Component}
  */


  este.ui.Component = function(domHelper) {
    este.ui.Component.superClass_.constructor.call(this, domHelper);
  }

  goog.inherits(este.ui.Component, goog.ui.Component);

  /**
    @type {Array.<este.events.Delegation>}
    @protected
  */


  este.ui.Component.prototype.delegations = null;

  /**
    @type {goog.events.KeyHandler}
    @protected
  */


  este.ui.Component.prototype.keyHandler = null;

  /**
    @type {este.events.TapHandler}
    @protected
  */


  este.ui.Component.prototype.tapHandler = null;

  /**
    @type {este.events.SubmitHandler}
    @protected
  */


  este.ui.Component.prototype.submitHandler = null;

  /**
    @inheritDoc
  */


  este.ui.Component.prototype.enterDocument = function() {
    este.ui.Component.superClass_.enterDocument.call(this);
    this.delegations = [];
    this.keyHandler = null;
    this.tapHandler = null;
    this.submitHandler = null;
  };

  /**
    @inheritDoc
  */


  este.ui.Component.prototype.exitDocument = function() {
    var delegation, _i, _len, _ref, _ref1, _ref2, _ref3;
    este.ui.Component.superClass_.exitDocument.call(this);
    _ref = this.delegations;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      delegation = _ref[_i];
      delegation.dispose();
    }
    if ((_ref1 = this.keyHandler) != null) {
      _ref1.dispose();
    }
    if ((_ref2 = this.tapHandler) != null) {
      _ref2.dispose();
    }
    if ((_ref3 = this.submitHandler) != null) {
      _ref3.dispose();
    }
  };

  /**
    Just alias for getHandler().listen.
    @param {goog.events.EventTarget|EventTarget|string} src Event source.
    @param {string|Array.<string>|number} type Event type to listen for or array of
      event types or key code number.
    @param {Function|Object=} fn Optional callback function to be used as
      the listener or an object with handleEvent function.
    @param {boolean=} capture Optional whether to use capture phase.
    @param {Object=} handler Object in whose scope to call the listener.
    @protected
  */


  este.ui.Component.prototype.on = function(src, type, fn, capture, handler) {
    goog.asserts.assert(this.isInDocument(), 'on method can be called only when component is in document');
    if (goog.isString(src)) {
      if (goog.isFunction(fn)) {
        this.delegate(src, type, fn);
      }
      return;
    }
    type = /** @type {string|Array.<string>} */ (type);

    return this.getHandler().listen(src, type, fn, capture, handler);
  };

  /**
    Just alias for getHandler().unlisten.
    @param {goog.events.EventTarget|EventTarget} src Event source.
    @param {string|Array.<string>} type Event type to listen for or array of
      event types.
    @param {Function|Object=} fn Optional callback function to be used as
      the listener or an object with handleEvent function.
    @param {boolean=} capture Optional whether to use capture phase.
    @param {Object=} handler Object in whose scope to call the listener.
    @protected
  */


  este.ui.Component.prototype.off = function(src, type, fn, capture, handler) {
    return this.getHandler().unlisten(src, type, fn, capture, handler);
  };

  /**
    @param {string} selector
    @param {string|Array.<string>|number} arg
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.delegate = function(selector, arg, fn) {
    if (arg === 'tap') {
      return this.delegateTapEvents(selector, fn);
    } else if (arg === 'submit') {
      return this.delegateSubmitEvents(selector, fn);
    } else if (typeof arg === 'number') {
      return this.delegateKeyEvents(selector, arg, fn);
    } else {
      return this.delegateDomEvents(selector, arg, fn);
    }
  };

  /**
    @param {string} selector
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.delegateTapEvents = function(selector, fn) {
    var _ref;
    if ((_ref = this.tapHandler) == null) {
      this.tapHandler = new este.events.TapHandler(this.getElement());
    }
    return this.on(this.tapHandler, 'tap', function(e) {
      return this.callDelegateCallbackIfMatched(selector, e, fn);
    });
  };

  /**
    @param {string} selector
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.delegateSubmitEvents = function(selector, fn) {
    var _ref;
    if ((_ref = this.submitHandler) == null) {
      this.submitHandler = new este.events.SubmitHandler(this.getElement());
    }
    return this.on(this.submitHandler, 'submit', function(e) {
      return this.callDelegateCallbackIfMatched(selector, e, fn);
    });
  };

  /**
    @param {string} selector
    @param {number} keyCode
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.delegateKeyEvents = function(selector, keyCode, fn) {
    var _ref;
    if ((_ref = this.keyHandler) == null) {
      this.keyHandler = new goog.events.KeyHandler(this.getElement());
    }
    return this.on(this.keyHandler, 'key', function(e) {
      if (e.keyCode !== keyCode) {
        return;
      }
      return this.callDelegateCallbackIfMatched(selector, e, fn);
    });
  };

  /**
    @param {string} selector
    @param {string|Array.<string>} events
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.delegateDomEvents = function(selector, events, fn) {
    var delegation, matcher;
    matcher = this.createSelectorMatcher(selector);
    delegation = este.events.Delegation.create(this.getElement(), events, matcher);
    this.delegations.push(delegation);
    return this.on(delegation, events, fn);
  };

  /**
    @param {string} selector
    @param {goog.events.BrowserEvent} e
    @param {Function} fn
    @protected
  */


  este.ui.Component.prototype.callDelegateCallbackIfMatched = function(selector, e, fn) {
    var matcher, target;
    matcher = this.createSelectorMatcher(selector);
    target = goog.dom.getAncestor(e.target, matcher, true);
    if (!target) {
      return;
    }
    e.target = target;
    return fn.call(this, e);
  };

  /**
    @param {string} selector
    @return {function(Node): boolean}
    @protected
  */


  este.ui.Component.prototype.createSelectorMatcher = function(selector) {
    return function(el) {
      return este.dom.match(el, selector);
    };
  };

  
