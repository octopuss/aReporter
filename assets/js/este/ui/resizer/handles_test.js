// Generated by CoffeeScript 1.4.0

suite('este.ui.resizer.Handles', function() {
  var Handles, dragger, draggerFactory, element, fireMouseDownOnHorizontalHandle, fireMouseDownOnVerticalHandle, handles, invisibleOverlay, invisibleOverlayFactory, offsetParent;
  Handles = este.ui.resizer.Handles;
  element = null;
  handles = null;
  offsetParent = null;
  dragger = null;
  draggerFactory = null;
  invisibleOverlay = null;
  invisibleOverlayFactory = function() {
    return invisibleOverlay;
  };
  fireMouseDownOnVerticalHandle = function() {
    return goog.events.fireListeners(handles.vertical, 'mousedown', false, {
      target: handles.vertical
    });
  };
  fireMouseDownOnHorizontalHandle = function() {
    return goog.events.fireListeners(handles.horizontal, 'mousedown', false, {
      target: handles.horizontal
    });
  };
  setup(function() {
    document.elementFromPoint = function() {};
    element = document.createElement('div');
    element.offsetLeft = 20;
    element.offsetTop = 30;
    element.offsetWidth = 100;
    element.offsetHeight = 200;
    offsetParent = document.createElement('div');
    element.offsetParent = offsetParent;
    dragger = {
      startDrag: function() {},
      addEventListener: function() {},
      dispose: function() {}
    };
    draggerFactory = function() {
      return dragger;
    };
    invisibleOverlay = new goog.ui.Component;
    handles = new Handles(draggerFactory, invisibleOverlayFactory);
    return handles.decorate(element);
  });
  teardown(function() {
    return delete document.elementFromPoint;
  });
  suite('Handles.create', function() {
    return test('should create instance', function() {
      handles = Handles.create();
      return assert.instanceOf(handles, Handles);
    });
  });
  suite('decorate', function() {
    test('should render vertical and horizontal handles', function() {
      assert.equal(handles.vertical.nodeType, 1);
      return assert.equal(handles.horizontal.nodeType, 1);
    });
    test('should render handles into offsetParent', function() {
      assert.isNotNull(handles.vertical.parentNode);
      assert.isNotNull(handles.horizontal.parentNode);
      assert.equal(handles.vertical.parentNode, element.offsetParent);
      return assert.equal(handles.horizontal.parentNode, element.offsetParent);
    });
    test('should set handles bounds', function() {
      assert.equal(handles.horizontal.style.left, '20px');
      assert.equal(handles.horizontal.style.top, '230px');
      assert.equal(handles.horizontal.style.width, '100px');
      assert.equal(handles.vertical.style.left, '120px');
      assert.equal(handles.vertical.style.top, '30px');
      return assert.equal(handles.vertical.style.height, '200px');
    });
    test('should add classes to handles', function() {
      assert.ok(goog.dom.classes.has(handles.horizontal, 'e-resizer-handle-horizontal'));
      return assert.ok(goog.dom.classes.has(handles.vertical, 'e-resizer-handle-vertical'));
    });
    return test('should render handles into element itself if offsetParent is null', function() {
      element.offsetParent = null;
      handles = new Handles;
      handles.decorate(element);
      assert.equal(handles.vertical.parentNode, element);
      return assert.equal(handles.horizontal.parentNode, element);
    });
  });
  suite('update', function() {
    return test('should update handles bounds', function() {
      element.offsetLeft = 30;
      element.offsetTop = 40;
      element.offsetWidth = 110;
      element.offsetHeight = 210;
      handles.update();
      assert.equal(handles.horizontal.style.left, '30px');
      assert.equal(handles.horizontal.style.top, '250px');
      assert.equal(handles.horizontal.style.width, '110px');
      assert.equal(handles.vertical.style.left, '140px');
      assert.equal(handles.vertical.style.top, '40px');
      return assert.equal(handles.vertical.style.height, '210px');
    });
  });
  suite('dispose', function() {
    return test('should dispose handles', function() {
      handles.dispose();
      assert.isNull(handles.vertical.parentNode);
      assert.isNull(handles.horizontal.parentNode);
      assert.isFalse(goog.events.hasListener(handles.vertical, 'mouseout', false));
      return assert.isFalse(goog.events.hasListener(handles.horizontal, 'mouseout', false));
    });
  });
  suite('isHandle', function() {
    test('should return true for handle element', function() {
      assert.isTrue(handles.isHandle(handles.vertical));
      return assert.isTrue(handles.isHandle(handles.horizontal));
    });
    return test('should return false for anything else', function() {
      assert.isFalse(handles.isHandle({}));
      return assert.isFalse(handles.isHandle(null));
    });
  });
  suite('mousedown on horizontal handle', function() {
    test('should set horizontal handle as active', function() {
      fireMouseDownOnHorizontalHandle();
      return assert.equal(handles.activeHandle, handles.horizontal);
    });
    return test('should register events than call dragStart e on dragger from factory', function(done) {
      var count, event;
      event = {
        target: handles.horizontal
      };
      count = 0;
      dragger.addEventListener = function() {
        return count++;
      };
      dragger.startDrag = function(e) {
        assert.equal(e, event);
        assert.equal(count, 3);
        return done();
      };
      return goog.events.fireListeners(handles.horizontal, 'mousedown', false, event);
    });
  });
  suite('mousedown on vertical handle', function() {
    test('should set vertical handle as active', function() {
      fireMouseDownOnVerticalHandle();
      return assert.equal(handles.activeHandle, handles.vertical);
    });
    return test('should call register events than call dragStart e on dragger from factory', function(done) {
      var count, event;
      event = {
        target: handles.vertical
      };
      count = 0;
      dragger.addEventListener = function() {
        return count++;
      };
      dragger.startDrag = function(e) {
        assert.equal(e, event);
        assert.equal(count, 3);
        return done();
      };
      return goog.events.fireListeners(handles.vertical, 'mousedown', false, event);
    });
  });
  suite('dragging', function() {
    test('should dispatch start event, with property element', function(done) {
      goog.events.listenOnce(handles, 'start', function(e) {
        assert.equal(e.element, element);
        return done();
      });
      fireMouseDownOnVerticalHandle();
      return goog.events.fireListeners(dragger, 'start', false, {});
    });
    test('should dispatch start event, with property vertical true', function(done) {
      goog.events.listenOnce(handles, 'start', function(e) {
        assert.equal(e.vertical, true);
        return done();
      });
      fireMouseDownOnVerticalHandle();
      return goog.events.fireListeners(dragger, 'start', false, {});
    });
    test('should dispatch drag event, with property vertical true', function(done) {
      goog.events.listenOnce(handles, 'drag', function(e) {
        assert.equal(e.vertical, true);
        return done();
      });
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      return goog.events.fireListeners(dragger, 'drag', false, {});
    });
    test('should dispatch start event, with property vertical false', function(done) {
      goog.events.listenOnce(handles, 'start', function(e) {
        assert.equal(e.vertical, false);
        return done();
      });
      fireMouseDownOnHorizontalHandle();
      return goog.events.fireListeners(dragger, 'start', false, {});
    });
    test('should dispatch start event, with property vertical false', function(done) {
      goog.events.listenOnce(handles, 'drag', function(e) {
        assert.equal(e.vertical, false);
        return done();
      });
      fireMouseDownOnHorizontalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      return goog.events.fireListeners(dragger, 'drag', false, {});
    });
    test('should dispatch drag event, with properties element, width and height', function(done) {
      goog.events.listenOnce(handles, 'drag', function(e) {
        assert.equal(e.width, 15);
        assert.equal(e.height, 10);
        assert.equal(e.element, element);
        return done();
      });
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {
        clientX: 10,
        clientY: 20
      });
      return goog.events.fireListeners(dragger, 'drag', false, {
        clientX: 25,
        clientY: 30
      });
    });
    return test('drag should update handles bounds', function() {
      element.offsetLeft = 30;
      element.offsetTop = 40;
      element.offsetWidth = 110;
      element.offsetHeight = 210;
      handles.update();
      assert.equal(handles.horizontal.style.left, '30px');
      assert.equal(handles.horizontal.style.top, '250px');
      assert.equal(handles.horizontal.style.width, '110px');
      assert.equal(handles.vertical.style.left, '140px');
      assert.equal(handles.vertical.style.top, '40px');
      assert.equal(handles.vertical.style.height, '210px');
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      element.offsetLeft = 31;
      element.offsetTop = 42;
      element.offsetWidth = 113;
      element.offsetHeight = 214;
      goog.events.fireListeners(dragger, 'drag', false, {});
      assert.equal(handles.horizontal.style.left, '31px');
      assert.equal(handles.horizontal.style.top, '256px');
      assert.equal(handles.horizontal.style.width, '113px');
      assert.equal(handles.vertical.style.left, '144px');
      assert.equal(handles.vertical.style.top, '42px');
      return assert.equal(handles.vertical.style.height, '214px');
    });
  });
  suite('drag end event', function() {
    test('should dispose dragger', function(done) {
      fireMouseDownOnVerticalHandle();
      dragger.dispose = function() {
        return done();
      };
      goog.events.fireListeners(dragger, 'start', false, {});
      return goog.events.fireListeners(dragger, 'end', false, {});
    });
    test('should unrender invisible overlay', function() {
      var exitDocumentCalled;
      exitDocumentCalled = false;
      invisibleOverlay.exitDocument = function() {
        return exitDocumentCalled = true;
      };
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      goog.events.fireListeners(dragger, 'end', false, {});
      assert.isTrue(exitDocumentCalled);
      return assert.isNull(invisibleOverlay.getElement().parentNode);
    });
    test('should dispatch end event', function(done) {
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      goog.events.listenOnce(handles, 'end', function() {
        return done();
      });
      return goog.events.fireListeners(dragger, 'end', false, {});
    });
    test('should dispatch end event with bool property close equal true', function(done) {
      document.elementFromPoint = function() {
        return handles.vertical;
      };
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      goog.events.listenOnce(handles, 'end', function(e) {
        assert.isFalse(e.close);
        return done();
      });
      return goog.events.fireListeners(dragger, 'end', false, {});
    });
    test('should dispatch end event with bool property close equal false', function(done) {
      document.elementFromPoint = function() {
        return null;
      };
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      goog.events.listenOnce(handles, 'end', function(e) {
        assert.isTrue(e.close);
        return done();
      });
      return goog.events.fireListeners(dragger, 'end', false, {});
    });
    return test('should dispatch end event with element property', function(done) {
      goog.events.listenOnce(handles, 'end', function(e) {
        assert.equal(e.element, element);
        return done();
      });
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      return goog.events.fireListeners(dragger, 'end', false, {});
    });
  });
  suite('dispose', function() {
    test('should dispose dragger too', function(done) {
      fireMouseDownOnVerticalHandle();
      dragger.dispose = function() {
        return done();
      };
      return handles.dispose();
    });
    return test('should unrender invisible overlay', function() {
      var exitDocumentCalled;
      exitDocumentCalled = false;
      invisibleOverlay.exitDocument = function() {
        return exitDocumentCalled = true;
      };
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      goog.events.fireListeners(dragger, 'end', false, {});
      assert.isTrue(exitDocumentCalled);
      return assert.isNull(invisibleOverlay.getElement().parentNode);
    });
  });
  return suite('drag start event', function() {
    test('should render invisible overlay into handles document body', function() {
      fireMouseDownOnVerticalHandle();
      goog.events.fireListeners(dragger, 'start', false, {});
      return assert.equal(invisibleOverlay.getElement().parentNode, handles.dom_.getDocument().body);
    });
    test('should render invisible overlay with same cursor as activeHandle', function() {
      fireMouseDownOnVerticalHandle();
      handles.vertical.__style.cursor = 'fok';
      goog.events.fireListeners(dragger, 'start', false, {});
      return assert.equal(invisibleOverlay.getElement().style.cursor, 'fok');
    });
    return test('should render invisible overlay with same cursor as activeHandle', function() {
      fireMouseDownOnHorizontalHandle();
      handles.horizontal.__style.cursor = 'foo';
      goog.events.fireListeners(dragger, 'start', false, {});
      return assert.equal(invisibleOverlay.getElement().style.cursor, 'foo');
    });
  });
});
