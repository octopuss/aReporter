// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Forms persister. Persist form fields state into localStorage
  or session.

  note
    not tested in IE, but it should work in IE>8 and be easily fixable for rest

  todo
    add expiration
    improve field dom path (consider: url, form name, etc.)
    check&fix IE (http://stackoverflow.com/a/266252/233902)
  @see ../demos/formspersister.html
*/



goog.provide('este.ui.FormsPersister');

goog.provide('este.ui.FormsPersister.create');

goog.require('goog.ui.Component');

goog.require('goog.dom.forms');

goog.require('este.dom');

goog.require('goog.events.FocusHandler');

goog.require('goog.events.InputHandler');

goog.require('este.storage.create');



  

  /**
    @param {boolean=} session
    @constructor
    @extends {goog.ui.Component}
  */


  este.ui.FormsPersister = function(session) {
    if (session == null) {
      session = false;
    }
    este.ui.FormsPersister.superClass_.constructor.call(this);
    this.storage = este.storage.createCollectable('e-ui-formspersister', session);
  }

  goog.inherits(este.ui.FormsPersister, goog.ui.Component);

  /**
    @param {Element} element
    @param {boolean=} session
    @return {este.ui.FormsPersister}
  */


  este.ui.FormsPersister.create = function(element, session) {
    var persist;
    persist = new este.ui.FormsPersister(session);
    persist.decorate(element);
    return persist;
  };

  /**
    Minimal client storage ftw.
    @type {number}
  */


  este.ui.FormsPersister.prototype.expirationTime = 1000 * 60 * 60 * 24 * 30;

  /**
    @type {goog.storage.CollectableStorage}
    @protected
  */


  este.ui.FormsPersister.prototype.storage = null;

  /**
    @type {goog.events.FocusHandler}
    @protected
  */


  este.ui.FormsPersister.prototype.focusHandler = null;

  /**
    @inheritDoc
  */


  este.ui.FormsPersister.prototype.decorateInternal = function(element) {
    var data, path;
    este.ui.FormsPersister.superClass_.decorateInternal.call(this, element);
    path = this.getElementDomPath();
    data = this.storage.get(path.join());
    if (!data) {
      return;
    }
    data = /** @type {Object} */ (data);

    this.retrieve(data);
  };

  /**
    @param {Object} data
    @protected
  */


  este.ui.FormsPersister.prototype.retrieve = function(data) {
    var el, field, fields, fieldsMap, form, formPath, name, value, _i, _j, _k, _len, _len1, _len2, _name, _ref, _ref1, _ref2, _ref3, _ref4;
    for (formPath in data) {
      fields = data[formPath];
      form = este.dom.getElementByDomPathIndex(formPath.split(','));
      if (!form || !form.elements) {
        continue;
      }
      fieldsMap = {};
      _ref = form.elements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if ((_ref1 = fieldsMap[_name = el.name]) == null) {
          fieldsMap[_name] = [];
        }
        fieldsMap[el.name].push(el);
      }
      for (name in fields) {
        value = fields[name];
        field = (_ref2 = fieldsMap[name]) != null ? _ref2[0] : void 0;
        if (!field) {
          continue;
        }
        switch (field.type) {
          case 'radio':
            _ref3 = fieldsMap[name];
            for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
              el = _ref3[_j];
              goog.dom.forms.setValue(el, el.value === value);
            }
            break;
          case 'checkbox':
            _ref4 = fieldsMap[name];
            for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
              el = _ref4[_k];
              goog.dom.forms.setValue(el, goog.array.contains(value, el.value));
            }
            break;
          default:
            goog.dom.forms.setValue(field, value);
        }
      }
    }
  };

  /**
    @inheritDoc
  */


  este.ui.FormsPersister.prototype.enterDocument = function() {
    este.ui.FormsPersister.superClass_.enterDocument.call(this);
    this.focusHandler = new goog.events.FocusHandler(this.getElement());
    this.getHandler().listen(this.focusHandler, 'focusin', this.onFocusin).listen(this.getElement(), 'change', this.onChange);
  };

  /**
    @inheritDoc
  */


  este.ui.FormsPersister.prototype.exitDocument = function() {
    this.focusHandler.dispose();
    este.ui.FormsPersister.superClass_.exitDocument.call(this);
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.ui.FormsPersister.prototype.onFocusin = function(e) {
    var target = /** @type {Element} */ (e.target);

    var _ref;
    if (!((_ref = target.tagName) === 'INPUT' || _ref === 'TEXTAREA')) {
      return;
    }
    return this.registerInputHander(target);
  };

  /**
    @param {Element} field
    @protected
  */


  este.ui.FormsPersister.prototype.registerInputHander = function(field) {
    var handler;
    handler = new goog.events.InputHandler(field);
    this.getHandler().listen(handler, 'input', this.onFieldInput);
    return this.getHandler().listenOnce(field, 'blur', function(e) {
      return handler.dispose();
    });
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.ui.FormsPersister.prototype.onFieldInput = function(e) {
    var target = /** @type {Element} */ (e.target);
    return this.storeField(target);
  };

  /**
    @param {goog.events.BrowserEvent} e
    @protected
  */


  este.ui.FormsPersister.prototype.onChange = function(e) {
    var target = /** @type {Element} */ (e.target);
    return this.storeField(target);
  };

  /**
    @param {Element} field
    @protected
  */


  este.ui.FormsPersister.prototype.storeField = function(field) {
    var formDomPath, name, value;
    formDomPath = este.dom.getDomPathIndexes(field.form);
    name = field.name;
    value = this.getFieldValue(field);
    return this.store(formDomPath, name, value);
  };

  /**
    @param {Array.<number>} formDomPath
    @param {string} name
    @param {string|Array.<string>} value
  */


  este.ui.FormsPersister.prototype.store = function(formDomPath, name, value) {
    var key, path, storage, _ref;
    path = this.getElementDomPath();
    key = path.join();
    storage = this.storage.get(key);
    if (storage == null) {
      storage = {};
    }
    if ((_ref = storage[formDomPath]) == null) {
      storage[formDomPath] = {};
    }
    storage[formDomPath][name] = value;
    return this.storage.set(key, storage, goog.now() + this.expirationTime);
  };

  /**
    @return {Array.<number>}
    @protected
  */


  este.ui.FormsPersister.prototype.getElementDomPath = function() {
    return este.dom.getDomPathIndexes(this.getElement());
  };

  /**
    @param {Element} field
    @return {string|Array.<string>}
    @protected
  */


  este.ui.FormsPersister.prototype.getFieldValue = function(field) {
    var el, value, values, _i, _len, _ref;
    if (field.type === 'checkbox') {
      values = [];
      _ref = field.form.elements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        el = _ref[_i];
        if (!(el.name === field.name)) {
          continue;
        }
        value = goog.dom.forms.getValue(el);
        if (value != null) {
          values.push(value);
        }
      }
      return values;
    }
    return goog.dom.forms.getValue(field);
  };

  
