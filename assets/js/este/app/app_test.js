// Generated by CoffeeScript 1.4.0

suite('este.App', function() {
  var App, app, arrangeAppWithViews, createMockView, layout, router, view1, view2, view3;
  App = este.App;
  view1 = null;
  view2 = null;
  view3 = null;
  layout = null;
  router = null;
  app = null;
  setup(function() {
    view1 = createMockView(true);
    view2 = createMockView();
    view3 = createMockView();
    layout = {
      show: function() {},
      dispose: function() {}
    };
    router = {
      isHtml5historyEnabled: function() {
        return true;
      },
      start: function() {
        return app.load(view1);
      },
      add: function() {},
      pathNavigate: function() {},
      dispose: function() {}
    };
    arrangeAppWithViews();
    return app.start();
  });
  arrangeAppWithViews = function() {
    var views;
    views = [view1, view2, view3];
    return app = new App(views, layout, router);
  };
  createMockView = function(noAsync) {
    var view;
    view = new goog.events.EventTarget;
    view.load = function(params) {
      var result;
      result = new goog.result.SimpleResult;
      if (noAsync) {
        result.setValue(params);
      } else {
        setTimeout(function() {
          return result.setValue(params);
        }, 8);
      }
      return result;
    };
    view.dispose = function() {};
    view.url = '/';
    return view;
  };
  suite('constructor', function() {
    return test('should work', function() {
      return assert.instanceOf(app, App);
    });
  });
  suite('dispose', function() {
    return test('should not leak', function() {
      var count1;
      count1 = goog.events.getTotalListenerCount();
      arrangeAppWithViews();
      app.start();
      app.dispose();
      return assert.equal(count1, goog.events.getTotalListenerCount());
    });
  });
  suite('start', function() {
    test('should call view1.load then layout.show methods', function(done) {
      var loadCalled;
      arrangeAppWithViews();
      loadCalled = false;
      view1.load = function() {
        loadCalled = true;
        return este.result.ok();
      };
      layout.show = function() {
        assert.isTrue(loadCalled);
        return done();
      };
      return app.start();
    });
    test('should set view localStorage', function() {
      app.start();
      assert.instanceOf(view1.localStorage, este.storage.Local);
      assert.instanceOf(view2.localStorage, este.storage.Local);
      return assert.instanceOf(view3.localStorage, este.storage.Local);
    });
    return test('should call view1.load then layout.show method if urlEnabled == false', function(done) {
      var loadCalled;
      arrangeAppWithViews();
      app.urlEnabled = false;
      loadCalled = false;
      view1.load = function() {
        loadCalled = true;
        return este.result.ok();
      };
      layout.show = function() {
        assert.isTrue(loadCalled);
        return done();
      };
      return app.start();
    });
  });
  suite('router', function() {
    test('should be prepared in app.start', function(done) {
      var routes;
      arrangeAppWithViews();
      routes = [];
      router.add = function(url, callback) {
        return routes.push({
          url: url,
          callback: callback
        });
      };
      router.start = function() {
        assert.isTrue(router.silentTapHandler);
        assert.lengthOf(routes, 3);
        assert.equal(routes[0].url, '/');
        assert.isFunction(routes[0].callback);
        assert.equal(routes[1].url, '/');
        assert.isFunction(routes[1].callback);
        assert.equal(routes[2].url, '/');
        assert.isFunction(routes[2].callback);
        return done();
      };
      return app.start();
    });
    test('should call load on route 0 callback', function(done) {
      var routes;
      arrangeAppWithViews();
      routes = [];
      router.add = function(url, callback) {
        return routes.push({
          url: url,
          callback: callback
        });
      };
      app.start();
      app.load = function(view, params, isNavigation) {
        assert.equal(view, view1);
        assert.deepEqual(params, {
          id: 1
        });
        assert.isTrue(isNavigation);
        return done();
      };
      return routes[0].callback({
        id: 1
      }, true);
    });
    return test('should call load on route 1 callback', function(done) {
      var routes;
      arrangeAppWithViews();
      routes = [];
      router.add = function(url, callback) {
        return routes.push({
          url: url,
          callback: callback
        });
      };
      app.start();
      app.load = function(view, params, isNavigation) {
        assert.equal(view, view2);
        assert.deepEqual(params, {
          id: 2
        });
        assert.isFalse(isNavigation);
        return done();
      };
      return routes[1].callback({
        id: 2
      }, false);
    });
  });
  suite('load', function() {
    suite('view2', function() {
      test('should call layout.show with view and params', function(done) {
        layout.show = function(view, params) {
          assert.equal(view, view2);
          assert.deepEqual(params, {
            id: 1
          });
          return done();
        };
        return app.load(view2, {
          id: 1
        });
      });
      test('should dispatch beforeload event', function(done) {
        goog.events.listenOnce(app, 'beforeload', function(e) {
          assert.deepEqual(e.request, {
            view: view2,
            params: {
              id: 1
            },
            silent: false
          });
          return done();
        });
        return app.load(view2, {
          id: 1
        });
      });
      test('should dispatch beforeshow event', function(done) {
        goog.events.listenOnce(app, 'beforeshow', function(e) {
          assert.deepEqual(e.request, {
            view: view2,
            params: {
              id: 1
            },
            silent: false
          });
          return done();
        });
        return app.load(view2, {
          id: 1
        });
      });
      test('should call router.pathNavigate if urlEnabled', function(done) {
        router.pathNavigate = function(url, params, silent) {
          assert.equal(url, '/');
          assert.deepEqual(params, {
            id: 1
          });
          assert.isTrue(silent);
          return done();
        };
        app.urlEnabled = true;
        return app.load(view2, {
          id: 1
        }, false);
      });
      test('should not call router.pathNavigate if urlEnabled but view has null url', function() {
        var called;
        called = false;
        router.pathNavigate = function(url, params, silent) {
          return called = true;
        };
        app.urlEnabled = true;
        view1.url = null;
        app.load(view1, {
          id: 1
        }, false);
        return assert.isFalse(called);
      });
      return test('should not call router.pathNavigate if urlEnabled == false', function() {
        var called;
        called = false;
        router.pathNavigate = function(url, params, silent) {
          return called = true;
        };
        app.urlEnabled = false;
        app.load(view1, {
          id: 1
        }, false);
        return assert.isFalse(called);
      });
    });
    suite('view2 twice async', function() {
      return test('should call layout.show once', function(done) {
        layout.show = function() {
          return done();
        };
        app.load(view2);
        return setTimeout(function() {
          return app.load(view2);
        }, 4);
      });
    });
    suite('view 2, view 3 async', function() {
      return test('should call layout.show', function(done) {
        layout.show = function() {
          return done();
        };
        app.load(view2);
        return setTimeout(function() {
          return app.load(view3);
        }, 4);
      });
    });
    return suite('view 2, view 3, view2 async', function() {
      return test('should call layout.show', function(done) {
        layout.show = function() {
          return done();
        };
        app.load(view2);
        setTimeout(function() {
          return app.load(view3);
        }, 4);
        return setTimeout(function() {
          return app.load(view2);
        }, 8);
      });
    });
  });
  suite('dispose', function() {
    return test('should dispose pendingRequests, views and layout', function() {
      var calls;
      calls = '';
      view1.dispose = function() {
        return calls += '0';
      };
      view2.dispose = function() {
        return calls += '1';
      };
      view3.dispose = function() {
        return calls += '2';
      };
      layout.dispose = function() {
        return calls += '3';
      };
      router.dispose = function() {
        return calls += '4';
      };
      app.dispose();
      assert.equal(app.pendingRequests.length, 0);
      return assert.equal(calls, '01234');
    });
  });
  return suite('localStorageNamespace', function() {
    return test('should be non empty string', function() {
      assert.isString(app.localStorageNamespace);
      return assert.ok(app.localStorageNamespace);
    });
  });
});
