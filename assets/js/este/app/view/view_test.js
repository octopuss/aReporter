// Generated by CoffeeScript 1.4.0

suite('este.app.View', function() {
  var View, view;
  View = este.app.View;
  view = null;
  setup(function() {
    return view = new View;
  });
  suite('constructor', function() {
    return test('should work', function() {
      return assert.instanceOf(view, View);
    });
  });
  suite('load', function() {
    return test('should return successful result', function() {
      var result;
      result = view.load({
        id: 1
      });
      assert.deepEqual(result.getValue(), {
        id: 1
      });
      return assert.equal(result.getState(), goog.result.Result.State.SUCCESS);
    });
  });
  suite('redirect', function() {
    return test('should dispatch redirect event with viewClass and params', function(done) {
      goog.events.listenOnce(view, 'redirect', function(e) {
        assert.equal(e.viewClass, 1);
        assert.equal(e.params, 2);
        return done();
      });
      return view.redirect(1, 2);
    });
  });
  suite('getUrl', function() {
    test('should return null for view with null url', function() {
      return assert.isNull(view.getUrl({
        prototype: {}
      }));
    });
    return test('should return url for view with url and params', function() {
      var url, viewClass;
      viewClass = {
        prototype: {
          url: 'detail/:id'
        }
      };
      url = view.getUrl(viewClass, {
        id: 123
      });
      return assert.equal(url, 'detail/123');
    });
  });
  suite('defer', function() {
    return test('should defer passed method call', function(done) {
      view.update = function() {
        return done();
      };
      view.defer(view.update);
      view.defer(view.update);
      return view.defer(view.update);
    });
  });
  suite('mergeHtml', function() {
    return test('should call este.dom.merge', function(done) {
      var html, _merge;
      _merge = este.dom.merge;
      html = '';
      este.dom.merge = function(el, html) {
        este.dom.merge = _merge;
        assert.equal(el, view.getElement());
        assert.equal(html, 'html');
        return done();
      };
      return view.mergeHtml('html');
    });
  });
  return suite('dispose', function() {
    return test('should defer passed method call', function(done) {
      var called;
      called = false;
      view.update = function() {
        return called = true;
      };
      view.defer(view.update);
      view.dispose();
      return setTimeout(function() {
        assert.isFalse(called);
        return done();
      }, 0);
    });
  });
});
