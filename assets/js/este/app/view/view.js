// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview este.app.View.
*/



goog.provide('este.app.View');

goog.provide('este.app.View.EventType');

goog.require('este.app.view.Event');

goog.require('este.dom.merge');

goog.require('este.result');

goog.require('este.router.Route');

goog.require('este.ui.Component');

goog.require('goog.i18n.pluralRules');



  

  /**
    @constructor
    @extends {este.ui.Component}
  */


  este.app.View = function() {
    este.app.View.superClass_.constructor.call(this);
    this.deferredTimers = {};
  }

  goog.inherits(este.app.View, este.ui.Component);

  /**
    @enum {string}
  */


  este.app.View.EventType = {
    REDIRECT: 'redirect'
  };

  /**
    Url has to always start with s3j7lgxd4ruz10s3j7lgxd4ruz prefix. If html5 is not supported, then
    urls will be converted to s3j7lgxd4ruz11s3j7lgxd4ruz prefix. If url == s3j7lgxd4ruz12s3j7lgxd4ruz, then view is not url
    projected.
    Various url definitions: este/assets/js/este/router/route_test.coffee
    @type {string}
  */


  este.app.View.prototype.url = '';

  /**
    @type {este.storage.Local}
  */


  este.app.View.prototype.localStorage = null;

  /**
    @type {boolean}
  */


  este.app.View.prototype.html5historyEnabled = true;

  /**
    @type {Object}
    @private
  */


  este.app.View.prototype.deferredTimers = null;

  /**
    @param {function(new:este.app.View)} viewClass
    @param {Object=} params
    @return {?string}
  */


  este.app.View.prototype.getUrl = function(viewClass, params) {
    var url;
    url = viewClass.prototype.url;
    if (!(url != null)) {
      return null;
    }
    url = este.router.Route.getUrl(url, params);
    if (!this.html5historyEnabled) {
      url = '#/' + url;
    }
    return url;
  };

  /**
    This method should be overridden by inheriting objects.
    este.storage.Local or este.storage.Rest can be used, or any other object
    implementing goog.result.Result interface. If you don't want to load
    anything, just call default super implementation.
    @param {Object=} params
    @return {!goog.result.Result}
  */


  este.app.View.prototype.load = function(params) {
    return este.result.ok(params);
  };

  /**
    This method should be overridden by inheriting objects.
    Use this method for UI refresh. It can be called from enterDocument or on
    model change.
    @protected
  */


  este.app.View.prototype.update = goog.abstractMethod;

  /**
    Save innerHTML update.
    todo: write and link article about this approach
    @param {string} html
    @protected
  */


  este.app.View.prototype.mergeHtml = function(html) {
    return este.dom.merge(this.getElement(), html);
  };

  /**
    Defer passed method execution after current call stack.
    ex.
      defer -> alert s3j7lgxd4ruz15s3j7lgxd4ruz
      alert s3j7lgxd4ruz16s3j7lgxd4ruz
    todo: refactor into este.functions.defer
    @param {Function} fn
    @protected
  */


  este.app.View.prototype.defer = function(fn) {
    var uid,
      _this = this;
    uid = goog.getUid(fn);
    clearTimeout(this.deferredTimers[uid]);
    return this.deferredTimers[uid] = setTimeout(function() {
      return fn.call(_this);
    }, 0);
  };

  /**
    @param {function(new:este.app.View)} viewClass
    @param {Object=} params
    @protected
  */


  este.app.View.prototype.redirect = function(viewClass, params) {
    var e;
    e = new este.app.view.Event(este.app.View.EventType.REDIRECT, viewClass, params);
    return this.dispatchEvent(e);
  };

  /**
    @inheritDoc
  */


  este.app.View.prototype.on = function(src, type, fn, capture, handler) {
    var oldFn,
      _this = this;
    oldFn = fn;
    fn = function(e) {
      var clientId, clientIdElement, model;
      model = null;
      if (goog.dom.isElement(e.target)) {
        clientIdElement = _this.getClientIdElement(e);
        if (clientIdElement) {
          clientId = clientIdElement.getAttribute('client-id');
          model = _this.findModelByClientId(clientId);
          if (model) {
            e.model = model;
            e.modelElement = clientIdElement;
          }
        }
      }
      return oldFn.apply(_this, arguments);
    };
    return este.app.View.superClass_.on.call(this, src, type, fn, capture, handler);
  };

  /**
    @param {goog.events.BrowserEvent} e
    @return {Element}
    @protected
  */


  este.app.View.prototype.getClientIdElement = function(e) {
    var node;
    node = goog.dom.getAncestor(e.target, function(node) {
      return goog.dom.isElement(node) && node.hasAttribute('client-id');
    }, true);
    return /** @type {Element} */ (node);
  };

  /**
    @param {*} clientId
    @protected
  */


  este.app.View.prototype.findModelByClientId = function(clientId) {
    var key, model, value;
    for (key in this) {
      value = this[key];
      if (!(value instanceof este.Collection)) {
        continue;
      }
      model = value.findByClientId(clientId);
      if (model) {
        return model;
      }
    }
    return null;
  };

  /**
    @inheritDoc
  */


  este.app.View.prototype.disposeInternal = function() {
    var key, value, _ref;
    este.app.View.superClass_.disposeInternal.call(this);
    _ref = this.deferredTimers;
    for (key in _ref) {
      value = _ref[key];
      clearTimeout(value);
    }
  };

  
