// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Collection. Use it for storing various items. JSON, este.Model,
  EventTarget instance, whatever. Sorting & Filtering included. If item is
  instanceof este.Model, two models with the same id will throw an exception.
  @see ../demos/collection.html

  todo
    consider resort after bubbled change event
*/



goog.provide('este.Collection');

goog.require('este.Model');

goog.require('este.Model.Event');

goog.require('goog.array');

goog.require('goog.asserts');

goog.require('goog.events.EventTarget');



  

  /**
    @param {Array.<Object>=} array
    @param {function(new:este.Model)=} model
    @constructor
    @extends {goog.events.EventTarget}
  */


  este.Collection = function(array, model) {
    this.model = model != null ? model : this.model;
    este.Collection.superClass_.constructor.call(this);
    this.ids = {};
    this.array = [];
    if (array) {
      this.add(array);
    }
    return;
  }

  goog.inherits(este.Collection, goog.events.EventTarget);

  /**
    @type {Object.<string, boolean>}
    @protected
  */


  este.Collection.prototype.ids = null;

  /**
    @type {Array.<Object>}
    @protected
  */


  este.Collection.prototype.array = null;

  /**
    @type {function(new:este.Model, Object=, Function=)|null}
    @protected
  */


  este.Collection.prototype.model = null;

  /**
    @type {Function}
    @protected
  */


  este.Collection.prototype.sortBy = function(item) {
    return item;
  };

  /**
    todo: check date
    @type {Function}
    @protected
  */


  este.Collection.prototype.sortCompare = goog.array.defaultCompare;

  /**
    @type {boolean}
    @protected
  */


  este.Collection.prototype.sortReversed = false;

  /**
    @param {Array.<Object>|Object} arg
  */


  este.Collection.prototype.add = function(arg) {
    var added, array, item, _i, _len;
    array = goog.isArray(arg) ? arg : [arg];
    added = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (this.model && !(item instanceof this.model)) {
        item = new this.model(item);
      }
      this.ensureUnique(item);
      if (item instanceof goog.events.EventTarget) {
        item.setParentEventTarget(this);
      }
      added.push(item);
    }
    this.array.push.apply(this.array, added);
    this.sortInternal();
    this.dispatchAddEvent(added);
  };

  /**
    @param {Array|Object} array
    @return {boolean} True if an element was removed.
  */


  este.Collection.prototype.remove = function(array) {
    var item, removed, _i, _len;
    if (!goog.isArray(array)) {
      array = [array];
    }
    removed = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      item = array[_i];
      if (item instanceof goog.events.EventTarget) {
        item.setParentEventTarget(null);
      }
      if (goog.array.remove(this.array, item)) {
        removed.push(item);
      }
      this.removeUnique(item);
    }
    if (!removed.length) {
      return false;
    }
    this.dispatchRemoveEvent(removed);
    return true;
  };

  /**
    @param {Function} callback
  */


  este.Collection.prototype.removeIf = function(callback) {
    var toRemove;
    toRemove = goog.array.filter(this.array, callback);
    return this.remove(toRemove);
  };

  /**
    @param {*} object The object for which to test.
    @return {boolean} true if obj is present.
  */


  este.Collection.prototype.contains = function(object) {
    return goog.array.contains(this.array, object);
  };

  /**
    @param {number} index
    @return {*}
  */


  este.Collection.prototype.at = function(index) {
    return this.array[index];
  };

  /**
    @return {number}
  */


  este.Collection.prototype.getLength = function() {
    return this.array.length;
  };

  /**
    @return {Array.<Object>}
  */


  este.Collection.prototype.toArray = function() {
    return this.array;
  };

  /**
    Serialize into JSON.
    @param {boolean=} noMetas If true, metas and clientId are omitted. Works
    only for models.
    @return {Array.<Object>}
  */


  este.Collection.prototype.toJson = function(noMetas) {
    var item, _i, _len, _ref, _results;
    if (this.model) {
      _ref = this.array;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push(item.toJson(noMetas));
      }
      return _results;
    } else {
      return this.array.slice(0);
    }
  };

  /**
    Clear collection.
  */


  este.Collection.prototype.clear = function() {
    return this.remove(this.array.slice(0));
  };

  /**
    Find item
    @param {Function} fn
    @return {*}
  */


  este.Collection.prototype.find = function(fn) {
    var item, _i, _len, _ref;
    _ref = this.array;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      if (fn(item)) {
        return item;
      }
    }
  };

  /**
    Find item by Id
    @param {*} id
    @return {*}
  */


  este.Collection.prototype.findById = function(id) {
    var _this = this;
    return this.find(function(item) {
      var itemId;
      itemId = _this.model ? item.get('id') : item['id'];
      return itemId === id;
    });
  };

  /**
    todo: test
    Find item by Id
    @param {*} id
    @return {*}
  */


  este.Collection.prototype.findByClientId = function(id) {
    var _this = this;
    return this.find(function(item) {
      var itemId;
      itemId = _this.model ? item.get('clientId') : item['clientId'];
      return itemId === id;
    });
  };

  /**
    @param {{by: Function, compare: Function, reversed: boolean}=} options
  */


  este.Collection.prototype.sort = function(options) {
    if ((options != null ? options.by : void 0) !== void 0) {
      this.sortBy = options.by;
    }
    if ((options != null ? options.compare : void 0) !== void 0) {
      this.sortCompare = options.compare;
    }
    if ((options != null ? options.reversed : void 0) !== void 0) {
      this.sortReversed = options.reversed;
    }
    this.sortInternal();
    this.dispatchSortEvent();
  };

  /**
    @return {function(new:este.Model)|null}
  */


  este.Collection.prototype.getModel = function() {
    return this.model;
  };

  /**
    http://en.wikipedia.org/wiki/Uniform_resource_name
    @return {?string}
  */


  este.Collection.prototype.getUrn = function() {
    var _ref, _ref1, _ref2;
    return (_ref = (_ref1 = this.model) != null ? (_ref2 = _ref1.prototype) != null ? _ref2.urn : void 0 : void 0) != null ? _ref : null;
  };

  /**
    Filter collection by object or function and returns array of jsons.
    todo: consider return collection if model is defined
    @param {Object|Function} param
    @return {Array}
  */


  este.Collection.prototype.filter = function(param) {
    var array, item, _i, _len, _results,
      _this = this;
    array = this.toJson();
    switch (goog.typeOf(param)) {
      case 'function':
        goog.asserts.assertInstanceof(param, Function);
        _results = [];
        for (_i = 0, _len = array.length; _i < _len; _i++) {
          item = array[_i];
          if (param(item)) {
            _results.push(item);
          }
        }
        return _results;
        break;
      case 'object':
        return this.filter(function(item) {
          var key, value;
          for (key in param) {
            value = param[key];
            if (item[key] !== value) {
              return false;
            }
          }
          return true;
        });
      default:
        return null;
    }
  };

  /**
    todo:
      add better annotation
      consider suppress event dispatching during iteration
    @param {Function} fn
  */


  este.Collection.prototype.each = function(fn) {
    var item, _i, _len, _ref;
    _ref = this.array;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      fn(item);
    }
  };

  /**
    @param {Array} added
    @protected
  */


  este.Collection.prototype.dispatchAddEvent = function(added) {
    var addEvent, updateEvent;
    addEvent = new este.Model.Event(este.Model.EventType.ADD, this);
    addEvent.added = added;
    if (!this.dispatchEvent(addEvent)) {
      return false;
    }
    updateEvent = new este.Model.Event(este.Model.EventType.UPDATE, this);
    updateEvent.origin = addEvent;
    return this.dispatchEvent(updateEvent);
  };

  /**
    @param {Array} removed
    @protected
  */


  este.Collection.prototype.dispatchRemoveEvent = function(removed) {
    var removeEvent, updateEvent;
    removeEvent = new este.Model.Event(este.Model.EventType.REMOVE, this);
    removeEvent.removed = removed;
    if (!this.dispatchEvent(removeEvent)) {
      return false;
    }
    updateEvent = new este.Model.Event(este.Model.EventType.UPDATE, this);
    updateEvent.origin = removeEvent;
    return this.dispatchEvent(updateEvent);
  };

  /**
    @protected
  */


  este.Collection.prototype.dispatchSortEvent = function() {
    var sortEvent, updateEvent;
    sortEvent = new este.Model.Event(este.Model.EventType.SORT, this);
    if (!this.dispatchEvent(sortEvent)) {
      return false;
    }
    updateEvent = new este.Model.Event(este.Model.EventType.UPDATE, this);
    updateEvent.origin = sortEvent;
    return this.dispatchEvent(updateEvent);
  };

  /**
    @protected
  */


  este.Collection.prototype.sortInternal = function() {
    var _this = this;
    if (!this.sortBy || !this.sortCompare) {
      return;
    }
    this.array.sort(function(a, b) {
      a = _this.sortBy(a);
      b = _this.sortBy(b);
      return _this.sortCompare(a, b);
    });
    if (this.sortReversed) {
      this.array.reverse();
    }
  };

  /**
    Ensure unique item in collection if item is instanceof este.Model.
    @param {*} item
    @protected
  */


  este.Collection.prototype.ensureUnique = function(item) {
    var id, key;
    if (!(item instanceof este.Model)) {
      return;
    }
    id = item.get('id') || item.get('clientId');
    key = '$' + id;
    if (this.ids[key]) {
      goog.asserts.fail("Not allowed to add two models with the same id: " + id);
    }
    return this.ids[key] = true;
  };

  /**
    Remove unique id.
    @param {*} item
    @protected
  */


  este.Collection.prototype.removeUnique = function(item) {
    var id, key;
    if (!(item instanceof este.Model)) {
      return;
    }
    id = item.get('id') || item.get('clientId');
    key = '$' + id;
    return delete this.ids[key];
  };

  
