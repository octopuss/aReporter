// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Base class for classes using events.
*/



goog.provide('este.Base');

goog.require('goog.events.EventTarget');

goog.require('goog.events.EventHandler');



  

  /**
    @constructor
    @extends {goog.events.EventTarget}
  */


  este.Base = function() {
    este.Base.superClass_.constructor.call(this);
  }

  goog.inherits(este.Base, goog.events.EventTarget);

  /**
    @type {goog.events.EventHandler}
    @private
  */


  este.Base.prototype.handler_ = null;

  /**
    @protected
  */


  este.Base.prototype.getHandler = function() {
    var _ref;
    return (_ref = this.handler_) != null ? _ref : this.handler_ = new goog.events.EventHandler(this);
  };

  /**
    Just alias for .listen.
    @param {goog.events.EventTarget|EventTarget} src Event source.
    @param {string|Array.<string>} type Event type to listen for or array of
      event types.
    @param {Function|Object=} fn Optional callback function to be used as
      the listener or an object with handleEvent function.
    @param {boolean=} capture Optional whether to use capture phase.
    @param {Object=} handler Object in whose scope to call the listener.
    @protected
  */


  este.Base.prototype.on = function(src, type, fn, capture, handler) {
    return this.getHandler().listen(src, type, fn, capture, handler);
  };

  /**
    Just alias for .unlisten.
    @param {goog.events.EventTarget|EventTarget} src Event source.
    @param {string|Array.<string>} type Event type to listen for or array of
      event types.
    @param {Function|Object=} fn Optional callback function to be used as
      the listener or an object with handleEvent function.
    @param {boolean=} capture Optional whether to use capture phase.
    @param {Object=} handler Object in whose scope to call the listener.
    @protected
  */


  este.Base.prototype.off = function(src, type, fn, capture, handler) {
    return this.getHandler().unlisten(src, type, fn, capture, handler);
  };

  /**
    @inheritDoc
  */


  este.Base.prototype.disposeInternal = function() {
    var _ref;
    if ((_ref = this.handler_) != null) {
      _ref.dispose();
    }
    este.Base.superClass_.disposeInternal.apply(this, arguments);
  };

  
