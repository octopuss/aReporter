// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview Chunked pixel request. Payload is divided into max. 2kb
  chunks.
*/

goog.provide('este.net.ChunkedPixelRequest');

goog.provide('este.net.ChunkedPixelRequest.create');

goog.require('este.string');

goog.require('este.json');


  /**
    @param {string} uri
    @param {Function} randomStringFactory
    @param {Function} srcCallback
    @constructor
  */

  este.net.ChunkedPixelRequest = function(uri, randomStringFactory, srcCallback) {
    this.uri = uri;
    this.randomStringFactory = randomStringFactory;
    this.srcCallback = srcCallback;
  }

  /**
    @param {string} uri
    @return {este.net.ChunkedPixelRequest}
  */


  este.net.ChunkedPixelRequest.create = function(uri) {
    var srcCallback;
    srcCallback = function(src) {
      var img;
      img = new Image(1, 1);
      img.src = src;
    };
    return new este.net.ChunkedPixelRequest(uri, goog.string.getRandomString, srcCallback);
  };

  /**
    @type {number} http://support.microsoft.com/kb/208427
  */


  este.net.ChunkedPixelRequest.MAX_CHUNK_SIZE = 1900;

  /**
    @type {string}
  */


  este.net.ChunkedPixelRequest.prototype.uri = '';

  /**
    @type {Function}
  */


  este.net.ChunkedPixelRequest.prototype.randomStringFactory = null;

  /**
    @type {Function}
  */


  este.net.ChunkedPixelRequest.prototype.srcCallback = null;

  /**
    @param {Object} payload
  */


  este.net.ChunkedPixelRequest.prototype.send = function(payload) {
    var chunk, chunks, message, randomString, stringified, _i, _len;
    chunks = this.getChunks(payload);
    randomString = this.randomStringFactory();
    for (_i = 0, _len = chunks.length; _i < _len; _i++) {
      chunk = chunks[_i];
      message = {
        'u': randomString,
        'd': chunk.text,
        'i': chunk.index,
        't': chunk.total
      };
      stringified = este.json.stringify(message);
      this.srcCallback(this.uri + '?' + encodeURIComponent(stringified));
    }
  };

  /**
    @param {Object} payload
    @return {Array.<Object>}
    @protected
  */


  este.net.ChunkedPixelRequest.prototype.getChunks = function(payload) {
    var str;
    str = este.json.stringify(payload);
    return este.string.chunkToObject(str, este.net.ChunkedPixelRequest.MAX_CHUNK_SIZE);
  };

  
