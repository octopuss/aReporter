// Coffe Class fixed for Closure Compiler by Este.js
// Generated by CoffeeScript 1.4.0
/**
  @fileoverview HTML5 pushState and hashchange history. Facade for goog.History
  and goog.history.Html5History. It dispatches goog.history.Event.

  Some browsers fires popstate event on page load. It's wrong, because we want
  to control navigate event dispatching separately. These ghost popstate events
  are filtered via location.href check.

  @see ../demos/historyhtml5.html
  @see ../demos/historyhash.html
*/



goog.provide('este.History');

goog.require('este.Base');

goog.require('este.history.TokenTransformer');

goog.require('este.mobile');

goog.require('este.string');

goog.require('goog.dom');

goog.require('goog.History');

goog.require('goog.history.Event');

goog.require('goog.history.Html5History');

goog.require('goog.userAgent.product.isVersion');



  

  /**
    @param {string=} pathPrefix Path prefix to use if storing tokens in the path.
    The path prefix should start and end with slash.
    @param {boolean=} forceHash If true, este.History will degrade to hash even
    if html5history is supported.
    @constructor
    @extends {este.Base}
  */


  este.History = function(pathPrefix, forceHash) {
    var html5historySupported;
    this.pathPrefix = pathPrefix;
    este.History.superClass_.constructor.apply(this, arguments);
    html5historySupported = goog.history.Html5History.isSupported();
    if (este.mobile.iosVersion && este.mobile.iosVersion < 5) {
      html5historySupported = false;
    }
    if (goog.userAgent.product.ANDROID && !goog.userAgent.product.isVersion(3)) {
      html5historySupported = false;
    }
    this.html5historyEnabled = html5historySupported && !forceHash;
    this.setHistoryInternal(pathPrefix != null ? pathPrefix : '/');
  }

  goog.inherits(este.History, este.Base);

  /**
    @type {boolean}
  */


  este.History.prototype.html5historyEnabled = true;

  /**
    @type {goog.History|goog.history.Html5History}
    @protected
  */


  este.History.prototype.history = null;

  /**
    @type {goog.events.EventHandler}
    @protected
  */


  este.History.prototype.handler = null;

  /**
    @type {boolean}
    @protected
  */


  este.History.prototype.silent = false;

  /**
    @type {?string}
    @protected
  */


  este.History.prototype.currentHref = null;

  /**
    @param {string} token
    @param {boolean=} silent
  */


  este.History.prototype.setToken = function(token, silent) {
    this.silent = silent != null ? silent : false;
    token = este.string.stripSlashHashPrefixes(token);
    if (!this.html5historyEnabled) {
      token = '/' + token;
    }
    return this.history.setToken(token);
  };

  /**
    @return {string}
  */


  este.History.prototype.getToken = function() {
    return this.history.getToken();
  };

  /**
    It dispatches navigate event.
    @param {boolean=} enabled
  */


  este.History.prototype.setEnabled = function(enabled) {
    if (enabled == null) {
      enabled = true;
    }
    if (enabled) {
      this.getHandler().listen(this.history, 'navigate', this.onNavigate);
    } else {
      this.getHandler().unlisten(this.history, 'navigate', this.onNavigate);
    }
    return this.history.setEnabled(enabled);
  };

  /**
    @param {string} pathPrefix
    @protected
  */


  este.History.prototype.setHistoryInternal = function(pathPrefix) {
    var input, transformer;
    if (this.html5historyEnabled) {
      transformer = new este.history.TokenTransformer();
      this.history = new goog.history.Html5History(void 0, transformer);
      this.history.setUseFragment(false);
      return this.history.setPathPrefix(pathPrefix);
    } else {
      input = goog.dom.createDom('input', {
        style: 'display: none'
      });
      input = /** @type {HTMLInputElement} */ (input);

      document.body.appendChild(input);
      return this.history = new goog.History(false, void 0, input);
    }
  };

  /**
    @param {goog.history.Event} e
    @protected
  */


  este.History.prototype.onNavigate = function(e) {
    if (this.currentHref === location.href) {
      return;
    }
    this.currentHref = location.href;
    if (this.silent) {
      this.silent = false;
      return;
    }
    if (!this.html5historyEnabled) {
      e.token = e.token.substring(1);
    }
    return this.dispatchEvent(e);
  };

  /**
    @inheritDoc
  */


  este.History.prototype.disposeInternal = function() {
    this.history.dispose();
    este.History.superClass_.disposeInternal.apply(this, arguments);
  };

  
